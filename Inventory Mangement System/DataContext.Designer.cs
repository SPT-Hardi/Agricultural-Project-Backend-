//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 11-07-2022 13:18:54
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace ProductInventoryContext
{

    [DatabaseAttribute(Name = "ProductInventory")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class ProductInventoryDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(ProductInventoryDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAreaDetail(AreaDetail instance);
        partial void UpdateAreaDetail(AreaDetail instance);
        partial void DeleteAreaDetail(AreaDetail instance);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertDevControllerType(DevControllerType instance);
        partial void UpdateDevControllerType(DevControllerType instance);
        partial void DeleteDevControllerType(DevControllerType instance);
        partial void InsertDevController(DevController instance);
        partial void UpdateDevController(DevController instance);
        partial void DeleteDevController(DevController instance);
        partial void InsertIssue(Issue instance);
        partial void UpdateIssue(Issue instance);
        partial void DeleteIssue(Issue instance);
        partial void InsertLoginDetail(LoginDetail instance);
        partial void UpdateLoginDetail(LoginDetail instance);
        partial void DeleteLoginDetail(LoginDetail instance);
        partial void InsertProductionDetail(ProductionDetail instance);
        partial void UpdateProductionDetail(ProductionDetail instance);
        partial void DeleteProductionDetail(ProductionDetail instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertProductUnit(ProductUnit instance);
        partial void UpdateProductUnit(ProductUnit instance);
        partial void DeleteProductUnit(ProductUnit instance);
        partial void InsertPurchaseDetail(PurchaseDetail instance);
        partial void UpdatePurchaseDetail(PurchaseDetail instance);
        partial void DeletePurchaseDetail(PurchaseDetail instance);
        partial void InsertRefreshToken(RefreshToken instance);
        partial void UpdateRefreshToken(RefreshToken instance);
        partial void DeleteRefreshToken(RefreshToken instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertUserRefreshToken(UserRefreshToken instance);
        partial void UpdateUserRefreshToken(UserRefreshToken instance);
        partial void DeleteUserRefreshToken(UserRefreshToken instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        partial void InsertVegetable(Vegetable instance);
        partial void UpdateVegetable(Vegetable instance);
        partial void DeleteVegetable(Vegetable instance);

        #endregion

        public ProductInventoryDataContext() :
        base(@"Data Source=20.219.49.104;Initial Catalog=ProductInventory;Integrated Security=False;Persist Security Info=True;User ID=ProductInventoryDB;Password=ProductInventory@2022@@#", mappingSource)
        {
            OnCreated();
        }

        public ProductInventoryDataContext(MappingSource mappingSource) :
        base(@"Data Source=20.219.49.104;Initial Catalog=ProductInventory;Integrated Security=False;Persist Security Info=True;User ID=ProductInventoryDB;Password=ProductInventory@2022@@#", mappingSource)
        {
            OnCreated();
        }

        public ProductInventoryDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ProductInventoryDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ProductInventoryDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ProductInventoryDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<AreaDetail> AreaDetails
        {
            get
            {
                return this.GetTable<AreaDetail>();
            }
        }

        public Devart.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public Devart.Data.Linq.Table<DevControllerType> DevControllerTypes
        {
            get
            {
                return this.GetTable<DevControllerType>();
            }
        }

        public Devart.Data.Linq.Table<DevController> DevControllers
        {
            get
            {
                return this.GetTable<DevController>();
            }
        }

        public Devart.Data.Linq.Table<Issue> Issues
        {
            get
            {
                return this.GetTable<Issue>();
            }
        }

        public Devart.Data.Linq.Table<LoginDetail> LoginDetails
        {
            get
            {
                return this.GetTable<LoginDetail>();
            }
        }

        public Devart.Data.Linq.Table<ProductionDetail> ProductionDetails
        {
            get
            {
                return this.GetTable<ProductionDetail>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<ProductUnit> ProductUnits
        {
            get
            {
                return this.GetTable<ProductUnit>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseDetail> PurchaseDetails
        {
            get
            {
                return this.GetTable<PurchaseDetail>();
            }
        }

        public Devart.Data.Linq.Table<RefreshToken> RefreshTokens
        {
            get
            {
                return this.GetTable<RefreshToken>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<UserRefreshToken> UserRefreshTokens
        {
            get
            {
                return this.GetTable<UserRefreshToken>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

        public Devart.Data.Linq.Table<Vegetable> Vegetables
        {
            get
            {
                return this.GetTable<Vegetable>();
            }
        }

    
        /// <summary>
        /// There are no comments for IsAuthorised in the schema.
        /// </summary>
        [Function(Name=@"dbo.IsAuthorised", IsComposable=true)]
        public System.Nullable<System.Boolean> IsAuthorised([Parameter(Name="ControllerName", DbType="VARCHAR(100)")] string ControllerName, [Parameter(Name="ParentControllerName", DbType="VARCHAR(100)")] string ParentControllerName, [Parameter(Name="UId", DbType="INT")] int? UId, [Parameter(Name="RId", DbType="INT")] int? RId, [Parameter(Name="OId", DbType="INT")] int? OId, [Parameter(Name="LId", DbType="INT")] int? LId)
        {
            IExecuteResult _IsAuthorisedResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ControllerName, ParentControllerName, UId, RId, OId, LId);
            return ((System.Nullable<System.Boolean>)(_IsAuthorisedResult.ReturnValue));
        }
    }
}

namespace ProductInventoryContext
{

    /// <summary>
    /// There are no comments for ProductInventoryContext.AreaDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.AreaDetails")]
    public partial class AreaDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _AreaId;

        private string _MainAreaName;

        private string _SubAreaName;

        private string _AreaName;

        private System.DateTime _LastUpdated;

        private int _LoginId;
        #pragma warning restore 0649

        private EntityRef<LoginDetail> _LoginDetail;

        private EntitySet<Issue> _Issues;

        private EntitySet<ProductionDetail> _ProductionDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAreaIdChanging(int value);
        partial void OnAreaIdChanged();
        partial void OnMainAreaNameChanging(string value);
        partial void OnMainAreaNameChanged();
        partial void OnSubAreaNameChanging(string value);
        partial void OnSubAreaNameChanged();
        partial void OnAreaNameChanging(string value);
        partial void OnAreaNameChanged();
        partial void OnLastUpdatedChanging(System.DateTime value);
        partial void OnLastUpdatedChanged();
        partial void OnLoginIdChanging(int value);
        partial void OnLoginIdChanged();
        #endregion

        public AreaDetail()
        {
            this._LoginDetail  = default(EntityRef<LoginDetail>);
            this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
            this._ProductionDetails = new EntitySet<ProductionDetail>(new Action<ProductionDetail>(this.attach_ProductionDetails), new Action<ProductionDetail>(this.detach_ProductionDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AreaId in the schema.
        /// </summary>
        [Column(Storage = "_AreaId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int AreaId
        {
            get
            {
                return this._AreaId;
            }
            set
            {
                if (this._AreaId != value)
                {
                    this.OnAreaIdChanging(value);
                    this.SendPropertyChanging("AreaId");
                    this._AreaId = value;
                    this.SendPropertyChanged("AreaId");
                    this.OnAreaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MainAreaName in the schema.
        /// </summary>
        [Column(Storage = "_MainAreaName", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MainAreaName
        {
            get
            {
                return this._MainAreaName;
            }
            set
            {
                if (this._MainAreaName != value)
                {
                    this.OnMainAreaNameChanging(value);
                    this.SendPropertyChanging("MainAreaName");
                    this._MainAreaName = value;
                    this.SendPropertyChanged("MainAreaName");
                    this.OnMainAreaNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubAreaName in the schema.
        /// </summary>
        [Column(Storage = "_SubAreaName", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string SubAreaName
        {
            get
            {
                return this._SubAreaName;
            }
            set
            {
                if (this._SubAreaName != value)
                {
                    this.OnSubAreaNameChanging(value);
                    this.SendPropertyChanging("SubAreaName");
                    this._SubAreaName = value;
                    this.SendPropertyChanged("SubAreaName");
                    this.OnSubAreaNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AreaName in the schema.
        /// </summary>
        [Column(Storage = "_AreaName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AreaName
        {
            get
            {
                return this._AreaName;
            }
            set
            {
                if (this._AreaName != value)
                {
                    this.OnAreaNameChanging(value);
                    this.SendPropertyChanging("AreaName");
                    this._AreaName = value;
                    this.SendPropertyChanged("AreaName");
                    this.OnAreaNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdated in the schema.
        /// </summary>
        [Column(Storage = "_LastUpdated", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdated
        {
            get
            {
                return this._LastUpdated;
            }
            set
            {
                if (this._LastUpdated != value)
                {
                    this.OnLastUpdatedChanging(value);
                    this.SendPropertyChanging("LastUpdated");
                    this._LastUpdated = value;
                    this.SendPropertyChanged("LastUpdated");
                    this.OnLastUpdatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginId in the schema.
        /// </summary>
        [Column(Storage = "_LoginId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LoginId
        {
            get
            {
                return this._LoginId;
            }
            set
            {
                if (this._LoginId != value)
                {
                    if (this._LoginDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLoginIdChanging(value);
                    this.SendPropertyChanging("LoginId");
                    this._LoginId = value;
                    this.SendPropertyChanged("LoginId");
                    this.OnLoginIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_AreaDetail", Storage="_LoginDetail", ThisKey="LoginId", OtherKey="LoginID", IsForeignKey=true)]
        public LoginDetail LoginDetail
        {
            get
            {
                return this._LoginDetail.Entity;
            }
            set
            {
                LoginDetail previousValue = this._LoginDetail.Entity;
                if ((previousValue != value) || (this._LoginDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LoginDetail");
                    if (previousValue != null)
                    {
                        this._LoginDetail.Entity = null;
                        previousValue.AreaDetails.Remove(this);
                    }
                    this._LoginDetail.Entity = value;
                    if (value != null)
                    {
                        this._LoginId = value.LoginID;
                        value.AreaDetails.Add(this);
                    }
                    else
                    {
                        this._LoginId = default(int);
                    }
                    this.SendPropertyChanged("LoginDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Issues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AreaDetail_Issue", Storage="_Issues", ThisKey="AreaId", OtherKey="AreaId", DeleteRule="NO ACTION")]
        public EntitySet<Issue> Issues
        {
            get
            {
                return this._Issues;
            }
            set
            {
                this._Issues.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AreaDetail_ProductionDetail", Storage="_ProductionDetails", ThisKey="AreaId", OtherKey="AreaId", DeleteRule="NO ACTION")]
        public EntitySet<ProductionDetail> ProductionDetails
        {
            get
            {
                return this._ProductionDetails;
            }
            set
            {
                this._ProductionDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.AreaDetail = this;
        }
    
        private void detach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.AreaDetail = null;
        }

        private void attach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.AreaDetail = this;
        }
    
        private void detach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.AreaDetail = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.Category in the schema.
    /// </summary>
    [Table(Name = @"dbo.Categories")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryID;

        private string _CategoryName;

        private string _Description;

        private int _LoginID;

        private System.DateTime _DateTime;
        #pragma warning restore 0649

        private EntityRef<LoginDetail> _LoginDetail;

        private EntitySet<Product> _Products;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnLoginIDChanging(int value);
        partial void OnLoginIDChanged();
        partial void OnDateTimeChanging(System.DateTime value);
        partial void OnDateTimeChanged();
        #endregion

        public Category()
        {
            this._LoginDetail  = default(EntityRef<LoginDetail>);
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryID in the schema.
        /// </summary>
        [Column(Storage = "_CategoryID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging("CategoryID");
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Storage = "_CategoryName", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging("CategoryName");
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "VARCHAR(300)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginID in the schema.
        /// </summary>
        [Column(Storage = "_LoginID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LoginID
        {
            get
            {
                return this._LoginID;
            }
            set
            {
                if (this._LoginID != value)
                {
                    if (this._LoginDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLoginIDChanging(value);
                    this.SendPropertyChanging("LoginID");
                    this._LoginID = value;
                    this.SendPropertyChanged("LoginID");
                    this.OnLoginIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_Category", Storage="_LoginDetail", ThisKey="LoginID", OtherKey="LoginID", IsForeignKey=true)]
        public LoginDetail LoginDetail
        {
            get
            {
                return this._LoginDetail.Entity;
            }
            set
            {
                LoginDetail previousValue = this._LoginDetail.Entity;
                if ((previousValue != value) || (this._LoginDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LoginDetail");
                    if (previousValue != null)
                    {
                        this._LoginDetail.Entity = null;
                        previousValue.Categories.Remove(this);
                    }
                    this._LoginDetail.Entity = value;
                    if (value != null)
                    {
                        this._LoginID = value.LoginID;
                        value.Categories.Add(this);
                    }
                    else
                    {
                        this._LoginID = default(int);
                    }
                    this.SendPropertyChanged("LoginDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_Product", Storage="_Products", ThisKey="CategoryID", OtherKey="CategoryID", DeleteRule="NO ACTION")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Category = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Category = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.DevControllerType in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_Controller_Types")]
    public partial class DevControllerType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private short _ControllerTypeId;

        private string _ControllerType;
        #pragma warning restore 0649

        private EntitySet<DevController> _DevControllers;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnControllerTypeIdChanging(short value);
        partial void OnControllerTypeIdChanged();
        partial void OnControllerTypeChanging(string value);
        partial void OnControllerTypeChanged();
        #endregion

        public DevControllerType()
        {
            this._DevControllers = new EntitySet<DevController>(new Action<DevController>(this.attach_DevControllers), new Action<DevController>(this.detach_DevControllers));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ControllerTypeId in the schema.
        /// </summary>
        [Column(Storage = "_ControllerTypeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SMALLINT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public short ControllerTypeId
        {
            get
            {
                return this._ControllerTypeId;
            }
            set
            {
                if (this._ControllerTypeId != value)
                {
                    this.OnControllerTypeIdChanging(value);
                    this.SendPropertyChanging("ControllerTypeId");
                    this._ControllerTypeId = value;
                    this.SendPropertyChanged("ControllerTypeId");
                    this.OnControllerTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControllerType in the schema.
        /// </summary>
        [Column(Storage = "_ControllerType", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ControllerType
        {
            get
            {
                return this._ControllerType;
            }
            set
            {
                if (this._ControllerType != value)
                {
                    this.OnControllerTypeChanging(value);
                    this.SendPropertyChanging("ControllerType");
                    this._ControllerType = value;
                    this.SendPropertyChanged("ControllerType");
                    this.OnControllerTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevControllers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevControllerType_DevController", Storage="_DevControllers", ThisKey="ControllerTypeId", OtherKey="ControllerTypeId", DeleteRule="NO ACTION")]
        public EntitySet<DevController> DevControllers
        {
            get
            {
                return this._DevControllers;
            }
            set
            {
                this._DevControllers.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevControllers(DevController entity)
        {
            this.SendPropertyChanging("DevControllers");
            entity.DevControllerType = this;
        }
    
        private void detach_DevControllers(DevController entity)
        {
            this.SendPropertyChanging("DevControllers");
            entity.DevControllerType = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.DevController in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_Controllers")]
    public partial class DevController : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CId;

        private string _ControllerName;

        private short _ControllerTypeId;

        private int? _ParentControllerId;

        private bool _Status;

        private bool _IsVisible;

        private int? _LoginTypeId;

        private bool _NeedAuthorisation;

        private bool _NeedParentAuthorisation;

        private bool _NeedLogin;

        private int? _Ordinal;

        private string _DisplayText;

        private string _URL;

        private string _SqlCommand;

        private string _SqlCommandKeys;

        private string _EditController;

        private string _CreateController;

        private string _SqlCommandOrderBy;

        private string _ControlController;

        private string _ChildControllers;
        #pragma warning restore 0649

        private EntitySet<DevController> _DevControllers_ParentControllerId;

        private EntityRef<DevController> _DevController_ParentControllerId;

        private EntityRef<Role> _Role;

        private EntityRef<DevControllerType> _DevControllerType;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCIdChanging(int value);
        partial void OnCIdChanged();
        partial void OnControllerNameChanging(string value);
        partial void OnControllerNameChanged();
        partial void OnControllerTypeIdChanging(short value);
        partial void OnControllerTypeIdChanged();
        partial void OnParentControllerIdChanging(int? value);
        partial void OnParentControllerIdChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();
        partial void OnIsVisibleChanging(bool value);
        partial void OnIsVisibleChanged();
        partial void OnLoginTypeIdChanging(int? value);
        partial void OnLoginTypeIdChanged();
        partial void OnNeedAuthorisationChanging(bool value);
        partial void OnNeedAuthorisationChanged();
        partial void OnNeedParentAuthorisationChanging(bool value);
        partial void OnNeedParentAuthorisationChanged();
        partial void OnNeedLoginChanging(bool value);
        partial void OnNeedLoginChanged();
        partial void OnOrdinalChanging(int? value);
        partial void OnOrdinalChanged();
        partial void OnDisplayTextChanging(string value);
        partial void OnDisplayTextChanged();
        partial void OnURLChanging(string value);
        partial void OnURLChanged();
        partial void OnSqlCommandChanging(string value);
        partial void OnSqlCommandChanged();
        partial void OnSqlCommandKeysChanging(string value);
        partial void OnSqlCommandKeysChanged();
        partial void OnEditControllerChanging(string value);
        partial void OnEditControllerChanged();
        partial void OnCreateControllerChanging(string value);
        partial void OnCreateControllerChanged();
        partial void OnSqlCommandOrderByChanging(string value);
        partial void OnSqlCommandOrderByChanged();
        partial void OnControlControllerChanging(string value);
        partial void OnControlControllerChanged();
        partial void OnChildControllersChanging(string value);
        partial void OnChildControllersChanged();
        #endregion

        public DevController()
        {
            this._DevControllers_ParentControllerId = new EntitySet<DevController>(new Action<DevController>(this.attach_DevControllers_ParentControllerId), new Action<DevController>(this.detach_DevControllers_ParentControllerId));
            this._DevController_ParentControllerId  = default(EntityRef<DevController>);
            this._Role  = default(EntityRef<Role>);
            this._DevControllerType  = default(EntityRef<DevControllerType>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CId in the schema.
        /// </summary>
        [Column(Storage = "_CId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CId
        {
            get
            {
                return this._CId;
            }
            set
            {
                if (this._CId != value)
                {
                    this.OnCIdChanging(value);
                    this.SendPropertyChanging("CId");
                    this._CId = value;
                    this.SendPropertyChanged("CId");
                    this.OnCIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControllerName in the schema.
        /// </summary>
        [Column(Storage = "_ControllerName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ControllerName
        {
            get
            {
                return this._ControllerName;
            }
            set
            {
                if (this._ControllerName != value)
                {
                    this.OnControllerNameChanging(value);
                    this.SendPropertyChanging("ControllerName");
                    this._ControllerName = value;
                    this.SendPropertyChanged("ControllerName");
                    this.OnControllerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControllerTypeId in the schema.
        /// </summary>
        [Column(Storage = "_ControllerTypeId", CanBeNull = false, DbType = "SMALLINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short ControllerTypeId
        {
            get
            {
                return this._ControllerTypeId;
            }
            set
            {
                if (this._ControllerTypeId != value)
                {
                    if (this._DevControllerType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnControllerTypeIdChanging(value);
                    this.SendPropertyChanging("ControllerTypeId");
                    this._ControllerTypeId = value;
                    this.SendPropertyChanged("ControllerTypeId");
                    this.OnControllerTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentControllerId in the schema.
        /// </summary>
        [Column(Storage = "_ParentControllerId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ParentControllerId
        {
            get
            {
                return this._ParentControllerId;
            }
            set
            {
                if (this._ParentControllerId != value)
                {
                    if (this._DevController_ParentControllerId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentControllerIdChanging(value);
                    this.SendPropertyChanging("ParentControllerId");
                    this._ParentControllerId = value;
                    this.SendPropertyChanged("ParentControllerId");
                    this.OnParentControllerIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsVisible in the schema.
        /// </summary>
        [Column(Storage = "_IsVisible", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsVisible
        {
            get
            {
                return this._IsVisible;
            }
            set
            {
                if (this._IsVisible != value)
                {
                    this.OnIsVisibleChanging(value);
                    this.SendPropertyChanging("IsVisible");
                    this._IsVisible = value;
                    this.SendPropertyChanged("IsVisible");
                    this.OnIsVisibleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginTypeId in the schema.
        /// </summary>
        [Column(Storage = "_LoginTypeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? LoginTypeId
        {
            get
            {
                return this._LoginTypeId;
            }
            set
            {
                if (this._LoginTypeId != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLoginTypeIdChanging(value);
                    this.SendPropertyChanging("LoginTypeId");
                    this._LoginTypeId = value;
                    this.SendPropertyChanged("LoginTypeId");
                    this.OnLoginTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NeedAuthorisation in the schema.
        /// </summary>
        [Column(Storage = "_NeedAuthorisation", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool NeedAuthorisation
        {
            get
            {
                return this._NeedAuthorisation;
            }
            set
            {
                if (this._NeedAuthorisation != value)
                {
                    this.OnNeedAuthorisationChanging(value);
                    this.SendPropertyChanging("NeedAuthorisation");
                    this._NeedAuthorisation = value;
                    this.SendPropertyChanged("NeedAuthorisation");
                    this.OnNeedAuthorisationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NeedParentAuthorisation in the schema.
        /// </summary>
        [Column(Storage = "_NeedParentAuthorisation", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool NeedParentAuthorisation
        {
            get
            {
                return this._NeedParentAuthorisation;
            }
            set
            {
                if (this._NeedParentAuthorisation != value)
                {
                    this.OnNeedParentAuthorisationChanging(value);
                    this.SendPropertyChanging("NeedParentAuthorisation");
                    this._NeedParentAuthorisation = value;
                    this.SendPropertyChanged("NeedParentAuthorisation");
                    this.OnNeedParentAuthorisationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NeedLogin in the schema.
        /// </summary>
        [Column(Storage = "_NeedLogin", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool NeedLogin
        {
            get
            {
                return this._NeedLogin;
            }
            set
            {
                if (this._NeedLogin != value)
                {
                    this.OnNeedLoginChanging(value);
                    this.SendPropertyChanging("NeedLogin");
                    this._NeedLogin = value;
                    this.SendPropertyChanged("NeedLogin");
                    this.OnNeedLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ordinal in the schema.
        /// </summary>
        [Column(Storage = "_Ordinal", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? Ordinal
        {
            get
            {
                return this._Ordinal;
            }
            set
            {
                if (this._Ordinal != value)
                {
                    this.OnOrdinalChanging(value);
                    this.SendPropertyChanging("Ordinal");
                    this._Ordinal = value;
                    this.SendPropertyChanged("Ordinal");
                    this.OnOrdinalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DisplayText in the schema.
        /// </summary>
        [Column(Storage = "_DisplayText", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string DisplayText
        {
            get
            {
                return this._DisplayText;
            }
            set
            {
                if (this._DisplayText != value)
                {
                    this.OnDisplayTextChanging(value);
                    this.SendPropertyChanging("DisplayText");
                    this._DisplayText = value;
                    this.SendPropertyChanged("DisplayText");
                    this.OnDisplayTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for URL in the schema.
        /// </summary>
        [Column(Storage = "_URL", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string URL
        {
            get
            {
                return this._URL;
            }
            set
            {
                if (this._URL != value)
                {
                    this.OnURLChanging(value);
                    this.SendPropertyChanging("URL");
                    this._URL = value;
                    this.SendPropertyChanged("URL");
                    this.OnURLChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SqlCommand in the schema.
        /// </summary>
        [Column(Storage = "_SqlCommand", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string SqlCommand
        {
            get
            {
                return this._SqlCommand;
            }
            set
            {
                if (this._SqlCommand != value)
                {
                    this.OnSqlCommandChanging(value);
                    this.SendPropertyChanging("SqlCommand");
                    this._SqlCommand = value;
                    this.SendPropertyChanged("SqlCommand");
                    this.OnSqlCommandChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SqlCommandKeys in the schema.
        /// </summary>
        [Column(Storage = "_SqlCommandKeys", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string SqlCommandKeys
        {
            get
            {
                return this._SqlCommandKeys;
            }
            set
            {
                if (this._SqlCommandKeys != value)
                {
                    this.OnSqlCommandKeysChanging(value);
                    this.SendPropertyChanging("SqlCommandKeys");
                    this._SqlCommandKeys = value;
                    this.SendPropertyChanged("SqlCommandKeys");
                    this.OnSqlCommandKeysChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EditController in the schema.
        /// </summary>
        [Column(Storage = "_EditController", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string EditController
        {
            get
            {
                return this._EditController;
            }
            set
            {
                if (this._EditController != value)
                {
                    this.OnEditControllerChanging(value);
                    this.SendPropertyChanging("EditController");
                    this._EditController = value;
                    this.SendPropertyChanged("EditController");
                    this.OnEditControllerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreateController in the schema.
        /// </summary>
        [Column(Storage = "_CreateController", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string CreateController
        {
            get
            {
                return this._CreateController;
            }
            set
            {
                if (this._CreateController != value)
                {
                    this.OnCreateControllerChanging(value);
                    this.SendPropertyChanging("CreateController");
                    this._CreateController = value;
                    this.SendPropertyChanged("CreateController");
                    this.OnCreateControllerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SqlCommandOrderBy in the schema.
        /// </summary>
        [Column(Storage = "_SqlCommandOrderBy", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string SqlCommandOrderBy
        {
            get
            {
                return this._SqlCommandOrderBy;
            }
            set
            {
                if (this._SqlCommandOrderBy != value)
                {
                    this.OnSqlCommandOrderByChanging(value);
                    this.SendPropertyChanging("SqlCommandOrderBy");
                    this._SqlCommandOrderBy = value;
                    this.SendPropertyChanged("SqlCommandOrderBy");
                    this.OnSqlCommandOrderByChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControlController in the schema.
        /// </summary>
        [Column(Storage = "_ControlController", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string ControlController
        {
            get
            {
                return this._ControlController;
            }
            set
            {
                if (this._ControlController != value)
                {
                    this.OnControlControllerChanging(value);
                    this.SendPropertyChanging("ControlController");
                    this._ControlController = value;
                    this.SendPropertyChanged("ControlController");
                    this.OnControlControllerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChildControllers in the schema.
        /// </summary>
        [Column(Storage = "_ChildControllers", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string ChildControllers
        {
            get
            {
                return this._ChildControllers;
            }
            set
            {
                if (this._ChildControllers != value)
                {
                    this.OnChildControllersChanging(value);
                    this.SendPropertyChanging("ChildControllers");
                    this._ChildControllers = value;
                    this.SendPropertyChanged("ChildControllers");
                    this.OnChildControllersChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevControllers_ParentControllerId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevController_DevController", Storage="_DevControllers_ParentControllerId", ThisKey="CId", OtherKey="ParentControllerId", DeleteRule="NO ACTION")]
        public EntitySet<DevController> DevControllers_ParentControllerId
        {
            get
            {
                return this._DevControllers_ParentControllerId;
            }
            set
            {
                this._DevControllers_ParentControllerId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevController_ParentControllerId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevController_DevController", Storage="_DevController_ParentControllerId", ThisKey="ParentControllerId", OtherKey="CId", IsForeignKey=true)]
        public DevController DevController_ParentControllerId
        {
            get
            {
                return this._DevController_ParentControllerId.Entity;
            }
            set
            {
                DevController previousValue = this._DevController_ParentControllerId.Entity;
                if ((previousValue != value) || (this._DevController_ParentControllerId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevController_ParentControllerId");
                    if (previousValue != null)
                    {
                        this._DevController_ParentControllerId.Entity = null;
                        previousValue.DevControllers_ParentControllerId.Remove(this);
                    }
                    this._DevController_ParentControllerId.Entity = value;
                    if (value != null)
                    {
                        this._ParentControllerId = value.CId;
                        value.DevControllers_ParentControllerId.Add(this);
                    }
                    else
                    {
                        this._ParentControllerId = default(int?);
                    }
                    this.SendPropertyChanged("DevController_ParentControllerId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_DevController", Storage="_Role", ThisKey="LoginTypeId", OtherKey="RoleID", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Role");
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.DevControllers.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._LoginTypeId = value.RoleID;
                        value.DevControllers.Add(this);
                    }
                    else
                    {
                        this._LoginTypeId = default(int?);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevControllerType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevControllerType_DevController", Storage="_DevControllerType", ThisKey="ControllerTypeId", OtherKey="ControllerTypeId", IsForeignKey=true)]
        public DevControllerType DevControllerType
        {
            get
            {
                return this._DevControllerType.Entity;
            }
            set
            {
                DevControllerType previousValue = this._DevControllerType.Entity;
                if ((previousValue != value) || (this._DevControllerType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevControllerType");
                    if (previousValue != null)
                    {
                        this._DevControllerType.Entity = null;
                        previousValue.DevControllers.Remove(this);
                    }
                    this._DevControllerType.Entity = value;
                    if (value != null)
                    {
                        this._ControllerTypeId = value.ControllerTypeId;
                        value.DevControllers.Add(this);
                    }
                    else
                    {
                        this._ControllerTypeId = default(short);
                    }
                    this.SendPropertyChanged("DevControllerType");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevControllers_ParentControllerId(DevController entity)
        {
            this.SendPropertyChanging("DevControllers_ParentControllerId");
            entity.DevController_ParentControllerId = this;
        }
    
        private void detach_DevControllers_ParentControllerId(DevController entity)
        {
            this.SendPropertyChanging("DevControllers_ParentControllerId");
            entity.DevController_ParentControllerId = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.Issue in the schema.
    /// </summary>
    [Table(Name = @"dbo.Issues")]
    public partial class Issue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IssueID;

        private System.DateTime _IssueDate;

        private int _ProductID;

        private decimal _PurchaseQuantity;

        private int _LoginID;

        private System.DateTime _LastUpdated;

        private string _Remark;

        private bool _IsEditable = true;

        private int? _ParentId;

        private int _AreaId;
        #pragma warning restore 0649

        private EntitySet<Issue> _Issues_ParentId;

        private EntityRef<Issue> _Issue_ParentId;

        private EntityRef<AreaDetail> _AreaDetail;

        private EntityRef<LoginDetail> _LoginDetail;

        private EntityRef<Product> _Product;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIssueIDChanging(int value);
        partial void OnIssueIDChanged();
        partial void OnIssueDateChanging(System.DateTime value);
        partial void OnIssueDateChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnPurchaseQuantityChanging(decimal value);
        partial void OnPurchaseQuantityChanged();
        partial void OnLoginIDChanging(int value);
        partial void OnLoginIDChanged();
        partial void OnLastUpdatedChanging(System.DateTime value);
        partial void OnLastUpdatedChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnIsEditableChanging(bool value);
        partial void OnIsEditableChanged();
        partial void OnParentIdChanging(int? value);
        partial void OnParentIdChanged();
        partial void OnAreaIdChanging(int value);
        partial void OnAreaIdChanged();
        #endregion

        public Issue()
        {
            this._Issues_ParentId = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues_ParentId), new Action<Issue>(this.detach_Issues_ParentId));
            this._Issue_ParentId  = default(EntityRef<Issue>);
            this._AreaDetail  = default(EntityRef<AreaDetail>);
            this._LoginDetail  = default(EntityRef<LoginDetail>);
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IssueID in the schema.
        /// </summary>
        [Column(Storage = "_IssueID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IssueID
        {
            get
            {
                return this._IssueID;
            }
            set
            {
                if (this._IssueID != value)
                {
                    this.OnIssueIDChanging(value);
                    this.SendPropertyChanging("IssueID");
                    this._IssueID = value;
                    this.SendPropertyChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IssueDate in the schema.
        /// </summary>
        [Column(Storage = "_IssueDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime IssueDate
        {
            get
            {
                return this._IssueDate;
            }
            set
            {
                if (this._IssueDate != value)
                {
                    this.OnIssueDateChanging(value);
                    this.SendPropertyChanging("IssueDate");
                    this._IssueDate = value;
                    this.SendPropertyChanged("IssueDate");
                    this.OnIssueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging("ProductID");
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseQuantity in the schema.
        /// </summary>
        [Column(Storage = "_PurchaseQuantity", CanBeNull = false, DbType = "DECIMAL(9,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal PurchaseQuantity
        {
            get
            {
                return this._PurchaseQuantity;
            }
            set
            {
                if (this._PurchaseQuantity != value)
                {
                    this.OnPurchaseQuantityChanging(value);
                    this.SendPropertyChanging("PurchaseQuantity");
                    this._PurchaseQuantity = value;
                    this.SendPropertyChanged("PurchaseQuantity");
                    this.OnPurchaseQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginID in the schema.
        /// </summary>
        [Column(Storage = "_LoginID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LoginID
        {
            get
            {
                return this._LoginID;
            }
            set
            {
                if (this._LoginID != value)
                {
                    if (this._LoginDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLoginIDChanging(value);
                    this.SendPropertyChanging("LoginID");
                    this._LoginID = value;
                    this.SendPropertyChanged("LoginID");
                    this.OnLoginIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdated in the schema.
        /// </summary>
        [Column(Storage = "_LastUpdated", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdated
        {
            get
            {
                return this._LastUpdated;
            }
            set
            {
                if (this._LastUpdated != value)
                {
                    this.OnLastUpdatedChanging(value);
                    this.SendPropertyChanging("LastUpdated");
                    this._LastUpdated = value;
                    this.SendPropertyChanged("LastUpdated");
                    this.OnLastUpdatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Storage = "_Remark", DbType = "VARCHAR(150)", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging("Remark");
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsEditable in the schema.
        /// </summary>
        [Column(Storage = "_IsEditable", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsEditable
        {
            get
            {
                return this._IsEditable;
            }
            set
            {
                if (this._IsEditable != value)
                {
                    this.OnIsEditableChanging(value);
                    this.SendPropertyChanging("IsEditable");
                    this._IsEditable = value;
                    this.SendPropertyChanged("IsEditable");
                    this.OnIsEditableChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentId in the schema.
        /// </summary>
        [Column(Storage = "_ParentId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ParentId
        {
            get
            {
                return this._ParentId;
            }
            set
            {
                if (this._ParentId != value)
                {
                    if (this._Issue_ParentId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentIdChanging(value);
                    this.SendPropertyChanging("ParentId");
                    this._ParentId = value;
                    this.SendPropertyChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AreaId in the schema.
        /// </summary>
        [Column(Storage = "_AreaId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AreaId
        {
            get
            {
                return this._AreaId;
            }
            set
            {
                if (this._AreaId != value)
                {
                    if (this._AreaDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAreaIdChanging(value);
                    this.SendPropertyChanging("AreaId");
                    this._AreaId = value;
                    this.SendPropertyChanged("AreaId");
                    this.OnAreaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Issues_ParentId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Issue_Issue", Storage="_Issues_ParentId", ThisKey="IssueID", OtherKey="ParentId", DeleteRule="NO ACTION")]
        public EntitySet<Issue> Issues_ParentId
        {
            get
            {
                return this._Issues_ParentId;
            }
            set
            {
                this._Issues_ParentId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Issue_ParentId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Issue_Issue", Storage="_Issue_ParentId", ThisKey="ParentId", OtherKey="IssueID", IsForeignKey=true)]
        public Issue Issue_ParentId
        {
            get
            {
                return this._Issue_ParentId.Entity;
            }
            set
            {
                Issue previousValue = this._Issue_ParentId.Entity;
                if ((previousValue != value) || (this._Issue_ParentId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Issue_ParentId");
                    if (previousValue != null)
                    {
                        this._Issue_ParentId.Entity = null;
                        previousValue.Issues_ParentId.Remove(this);
                    }
                    this._Issue_ParentId.Entity = value;
                    if (value != null)
                    {
                        this._ParentId = value.IssueID;
                        value.Issues_ParentId.Add(this);
                    }
                    else
                    {
                        this._ParentId = default(int?);
                    }
                    this.SendPropertyChanged("Issue_ParentId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AreaDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AreaDetail_Issue", Storage="_AreaDetail", ThisKey="AreaId", OtherKey="AreaId", IsForeignKey=true)]
        public AreaDetail AreaDetail
        {
            get
            {
                return this._AreaDetail.Entity;
            }
            set
            {
                AreaDetail previousValue = this._AreaDetail.Entity;
                if ((previousValue != value) || (this._AreaDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("AreaDetail");
                    if (previousValue != null)
                    {
                        this._AreaDetail.Entity = null;
                        previousValue.Issues.Remove(this);
                    }
                    this._AreaDetail.Entity = value;
                    if (value != null)
                    {
                        this._AreaId = value.AreaId;
                        value.Issues.Add(this);
                    }
                    else
                    {
                        this._AreaId = default(int);
                    }
                    this.SendPropertyChanged("AreaDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_Issue", Storage="_LoginDetail", ThisKey="LoginID", OtherKey="LoginID", IsForeignKey=true)]
        public LoginDetail LoginDetail
        {
            get
            {
                return this._LoginDetail.Entity;
            }
            set
            {
                LoginDetail previousValue = this._LoginDetail.Entity;
                if ((previousValue != value) || (this._LoginDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LoginDetail");
                    if (previousValue != null)
                    {
                        this._LoginDetail.Entity = null;
                        previousValue.Issues.Remove(this);
                    }
                    this._LoginDetail.Entity = value;
                    if (value != null)
                    {
                        this._LoginID = value.LoginID;
                        value.Issues.Add(this);
                    }
                    else
                    {
                        this._LoginID = default(int);
                    }
                    this.SendPropertyChanged("LoginDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Issue", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.Issues.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductID = value.ProductID;
                        value.Issues.Add(this);
                    }
                    else
                    {
                        this._ProductID = default(int);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Issues_ParentId(Issue entity)
        {
            this.SendPropertyChanging("Issues_ParentId");
            entity.Issue_ParentId = this;
        }
    
        private void detach_Issues_ParentId(Issue entity)
        {
            this.SendPropertyChanging("Issues_ParentId");
            entity.Issue_ParentId = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.LoginDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.LoginDetails")]
    public partial class LoginDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LoginID;

        private string _UserName;

        private string _SystemMAC;

        private System.DateTime _DateTime;

        private int? _UserID;
        #pragma warning restore 0649

        private EntitySet<AreaDetail> _AreaDetails;

        private EntitySet<Category> _Categories;

        private EntitySet<Issue> _Issues;

        private EntityRef<User> _User;

        private EntitySet<ProductionDetail> _ProductionDetails;

        private EntitySet<Product> _Products;

        private EntitySet<PurchaseDetail> _PurchaseDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLoginIDChanging(int value);
        partial void OnLoginIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnSystemMACChanging(string value);
        partial void OnSystemMACChanged();
        partial void OnDateTimeChanging(System.DateTime value);
        partial void OnDateTimeChanged();
        partial void OnUserIDChanging(int? value);
        partial void OnUserIDChanged();
        #endregion

        public LoginDetail()
        {
            this._AreaDetails = new EntitySet<AreaDetail>(new Action<AreaDetail>(this.attach_AreaDetails), new Action<AreaDetail>(this.detach_AreaDetails));
            this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
            this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
            this._User  = default(EntityRef<User>);
            this._ProductionDetails = new EntitySet<ProductionDetail>(new Action<ProductionDetail>(this.attach_ProductionDetails), new Action<ProductionDetail>(this.detach_ProductionDetails));
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            this._PurchaseDetails = new EntitySet<PurchaseDetail>(new Action<PurchaseDetail>(this.attach_PurchaseDetails), new Action<PurchaseDetail>(this.detach_PurchaseDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LoginID in the schema.
        /// </summary>
        [Column(Storage = "_LoginID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LoginID
        {
            get
            {
                return this._LoginID;
            }
            set
            {
                if (this._LoginID != value)
                {
                    this.OnLoginIDChanging(value);
                    this.SendPropertyChanging("LoginID");
                    this._LoginID = value;
                    this.SendPropertyChanged("LoginID");
                    this.OnLoginIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SystemMAC in the schema.
        /// </summary>
        [Column(Storage = "_SystemMAC", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string SystemMAC
        {
            get
            {
                return this._SystemMAC;
            }
            set
            {
                if (this._SystemMAC != value)
                {
                    this.OnSystemMACChanging(value);
                    this.SendPropertyChanging("SystemMAC");
                    this._SystemMAC = value;
                    this.SendPropertyChanged("SystemMAC");
                    this.OnSystemMACChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AreaDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_AreaDetail", Storage="_AreaDetails", ThisKey="LoginID", OtherKey="LoginId", DeleteRule="NO ACTION")]
        public EntitySet<AreaDetail> AreaDetails
        {
            get
            {
                return this._AreaDetails;
            }
            set
            {
                this._AreaDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Categories in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_Category", Storage="_Categories", ThisKey="LoginID", OtherKey="LoginID", DeleteRule="NO ACTION")]
        public EntitySet<Category> Categories
        {
            get
            {
                return this._Categories;
            }
            set
            {
                this._Categories.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Issues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_Issue", Storage="_Issues", ThisKey="LoginID", OtherKey="LoginID", DeleteRule="NO ACTION")]
        public EntitySet<Issue> Issues
        {
            get
            {
                return this._Issues;
            }
            set
            {
                this._Issues.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_LoginDetail", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.LoginDetails.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.UserID;
                        value.LoginDetails.Add(this);
                    }
                    else
                    {
                        this._UserID = default(int?);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_ProductionDetail", Storage="_ProductionDetails", ThisKey="LoginID", OtherKey="LoginID", DeleteRule="NO ACTION")]
        public EntitySet<ProductionDetail> ProductionDetails
        {
            get
            {
                return this._ProductionDetails;
            }
            set
            {
                this._ProductionDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_Product", Storage="_Products", ThisKey="LoginID", OtherKey="LoginID", DeleteRule="NO ACTION")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_PurchaseDetail", Storage="_PurchaseDetails", ThisKey="LoginID", OtherKey="LoginID", DeleteRule="NO ACTION")]
        public EntitySet<PurchaseDetail> PurchaseDetails
        {
            get
            {
                return this._PurchaseDetails;
            }
            set
            {
                this._PurchaseDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_AreaDetails(AreaDetail entity)
        {
            this.SendPropertyChanging("AreaDetails");
            entity.LoginDetail = this;
        }
    
        private void detach_AreaDetails(AreaDetail entity)
        {
            this.SendPropertyChanging("AreaDetails");
            entity.LoginDetail = null;
        }

        private void attach_Categories(Category entity)
        {
            this.SendPropertyChanging("Categories");
            entity.LoginDetail = this;
        }
    
        private void detach_Categories(Category entity)
        {
            this.SendPropertyChanging("Categories");
            entity.LoginDetail = null;
        }

        private void attach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.LoginDetail = this;
        }
    
        private void detach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.LoginDetail = null;
        }

        private void attach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.LoginDetail = this;
        }
    
        private void detach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.LoginDetail = null;
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.LoginDetail = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.LoginDetail = null;
        }

        private void attach_PurchaseDetails(PurchaseDetail entity)
        {
            this.SendPropertyChanging("PurchaseDetails");
            entity.LoginDetail = this;
        }
    
        private void detach_PurchaseDetails(PurchaseDetail entity)
        {
            this.SendPropertyChanging("PurchaseDetails");
            entity.LoginDetail = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.ProductionDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.ProductionDetail")]
    public partial class ProductionDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductionID;

        private int _VegetableId;

        private decimal _Quantity;

        private int _LoginID;

        private System.DateTime _ProductionDate;

        private string _Remark;

        private System.DateTime _LastUpdated;

        private bool _IsEditable = true;

        private int _AreaId;

        private int? _ParentId;
        #pragma warning restore 0649

        private EntitySet<ProductionDetail> _ProductionDetails_ParentId;

        private EntityRef<ProductionDetail> _ProductionDetail_ParentId;

        private EntityRef<AreaDetail> _AreaDetail;

        private EntityRef<LoginDetail> _LoginDetail;

        private EntityRef<Vegetable> _Vegetable;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductionIDChanging(int value);
        partial void OnProductionIDChanged();
        partial void OnVegetableIdChanging(int value);
        partial void OnVegetableIdChanged();
        partial void OnQuantityChanging(decimal value);
        partial void OnQuantityChanged();
        partial void OnLoginIDChanging(int value);
        partial void OnLoginIDChanged();
        partial void OnProductionDateChanging(System.DateTime value);
        partial void OnProductionDateChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnLastUpdatedChanging(System.DateTime value);
        partial void OnLastUpdatedChanged();
        partial void OnIsEditableChanging(bool value);
        partial void OnIsEditableChanged();
        partial void OnAreaIdChanging(int value);
        partial void OnAreaIdChanged();
        partial void OnParentIdChanging(int? value);
        partial void OnParentIdChanged();
        #endregion

        public ProductionDetail()
        {
            this._ProductionDetails_ParentId = new EntitySet<ProductionDetail>(new Action<ProductionDetail>(this.attach_ProductionDetails_ParentId), new Action<ProductionDetail>(this.detach_ProductionDetails_ParentId));
            this._ProductionDetail_ParentId  = default(EntityRef<ProductionDetail>);
            this._AreaDetail  = default(EntityRef<AreaDetail>);
            this._LoginDetail  = default(EntityRef<LoginDetail>);
            this._Vegetable  = default(EntityRef<Vegetable>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductionID in the schema.
        /// </summary>
        [Column(Storage = "_ProductionID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductionID
        {
            get
            {
                return this._ProductionID;
            }
            set
            {
                if (this._ProductionID != value)
                {
                    this.OnProductionIDChanging(value);
                    this.SendPropertyChanging("ProductionID");
                    this._ProductionID = value;
                    this.SendPropertyChanged("ProductionID");
                    this.OnProductionIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VegetableId in the schema.
        /// </summary>
        [Column(Storage = "_VegetableId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int VegetableId
        {
            get
            {
                return this._VegetableId;
            }
            set
            {
                if (this._VegetableId != value)
                {
                    if (this._Vegetable.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnVegetableIdChanging(value);
                    this.SendPropertyChanging("VegetableId");
                    this._VegetableId = value;
                    this.SendPropertyChanged("VegetableId");
                    this.OnVegetableIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Storage = "_Quantity", CanBeNull = false, DbType = "DECIMAL(9,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging("Quantity");
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginID in the schema.
        /// </summary>
        [Column(Storage = "_LoginID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LoginID
        {
            get
            {
                return this._LoginID;
            }
            set
            {
                if (this._LoginID != value)
                {
                    if (this._LoginDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLoginIDChanging(value);
                    this.SendPropertyChanging("LoginID");
                    this._LoginID = value;
                    this.SendPropertyChanged("LoginID");
                    this.OnLoginIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDate in the schema.
        /// </summary>
        [Column(Storage = "_ProductionDate", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ProductionDate
        {
            get
            {
                return this._ProductionDate;
            }
            set
            {
                if (this._ProductionDate != value)
                {
                    this.OnProductionDateChanging(value);
                    this.SendPropertyChanging("ProductionDate");
                    this._ProductionDate = value;
                    this.SendPropertyChanged("ProductionDate");
                    this.OnProductionDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Storage = "_Remark", DbType = "VARCHAR(150)", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging("Remark");
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdated in the schema.
        /// </summary>
        [Column(Storage = "_LastUpdated", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdated
        {
            get
            {
                return this._LastUpdated;
            }
            set
            {
                if (this._LastUpdated != value)
                {
                    this.OnLastUpdatedChanging(value);
                    this.SendPropertyChanging("LastUpdated");
                    this._LastUpdated = value;
                    this.SendPropertyChanged("LastUpdated");
                    this.OnLastUpdatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsEditable in the schema.
        /// </summary>
        [Column(Storage = "_IsEditable", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsEditable
        {
            get
            {
                return this._IsEditable;
            }
            set
            {
                if (this._IsEditable != value)
                {
                    this.OnIsEditableChanging(value);
                    this.SendPropertyChanging("IsEditable");
                    this._IsEditable = value;
                    this.SendPropertyChanged("IsEditable");
                    this.OnIsEditableChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AreaId in the schema.
        /// </summary>
        [Column(Storage = "_AreaId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AreaId
        {
            get
            {
                return this._AreaId;
            }
            set
            {
                if (this._AreaId != value)
                {
                    if (this._AreaDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAreaIdChanging(value);
                    this.SendPropertyChanging("AreaId");
                    this._AreaId = value;
                    this.SendPropertyChanged("AreaId");
                    this.OnAreaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentId in the schema.
        /// </summary>
        [Column(Storage = "_ParentId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ParentId
        {
            get
            {
                return this._ParentId;
            }
            set
            {
                if (this._ParentId != value)
                {
                    if (this._ProductionDetail_ParentId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentIdChanging(value);
                    this.SendPropertyChanging("ParentId");
                    this._ParentId = value;
                    this.SendPropertyChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDetails_ParentId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductionDetail_ProductionDetail", Storage="_ProductionDetails_ParentId", ThisKey="ProductionID", OtherKey="ParentId", DeleteRule="NO ACTION")]
        public EntitySet<ProductionDetail> ProductionDetails_ParentId
        {
            get
            {
                return this._ProductionDetails_ParentId;
            }
            set
            {
                this._ProductionDetails_ParentId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDetail_ParentId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductionDetail_ProductionDetail", Storage="_ProductionDetail_ParentId", ThisKey="ParentId", OtherKey="ProductionID", IsForeignKey=true)]
        public ProductionDetail ProductionDetail_ParentId
        {
            get
            {
                return this._ProductionDetail_ParentId.Entity;
            }
            set
            {
                ProductionDetail previousValue = this._ProductionDetail_ParentId.Entity;
                if ((previousValue != value) || (this._ProductionDetail_ParentId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductionDetail_ParentId");
                    if (previousValue != null)
                    {
                        this._ProductionDetail_ParentId.Entity = null;
                        previousValue.ProductionDetails_ParentId.Remove(this);
                    }
                    this._ProductionDetail_ParentId.Entity = value;
                    if (value != null)
                    {
                        this._ParentId = value.ProductionID;
                        value.ProductionDetails_ParentId.Add(this);
                    }
                    else
                    {
                        this._ParentId = default(int?);
                    }
                    this.SendPropertyChanged("ProductionDetail_ParentId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AreaDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AreaDetail_ProductionDetail", Storage="_AreaDetail", ThisKey="AreaId", OtherKey="AreaId", IsForeignKey=true)]
        public AreaDetail AreaDetail
        {
            get
            {
                return this._AreaDetail.Entity;
            }
            set
            {
                AreaDetail previousValue = this._AreaDetail.Entity;
                if ((previousValue != value) || (this._AreaDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("AreaDetail");
                    if (previousValue != null)
                    {
                        this._AreaDetail.Entity = null;
                        previousValue.ProductionDetails.Remove(this);
                    }
                    this._AreaDetail.Entity = value;
                    if (value != null)
                    {
                        this._AreaId = value.AreaId;
                        value.ProductionDetails.Add(this);
                    }
                    else
                    {
                        this._AreaId = default(int);
                    }
                    this.SendPropertyChanged("AreaDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_ProductionDetail", Storage="_LoginDetail", ThisKey="LoginID", OtherKey="LoginID", IsForeignKey=true)]
        public LoginDetail LoginDetail
        {
            get
            {
                return this._LoginDetail.Entity;
            }
            set
            {
                LoginDetail previousValue = this._LoginDetail.Entity;
                if ((previousValue != value) || (this._LoginDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LoginDetail");
                    if (previousValue != null)
                    {
                        this._LoginDetail.Entity = null;
                        previousValue.ProductionDetails.Remove(this);
                    }
                    this._LoginDetail.Entity = value;
                    if (value != null)
                    {
                        this._LoginID = value.LoginID;
                        value.ProductionDetails.Add(this);
                    }
                    else
                    {
                        this._LoginID = default(int);
                    }
                    this.SendPropertyChanged("LoginDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Vegetable in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Vegetable_ProductionDetail", Storage="_Vegetable", ThisKey="VegetableId", OtherKey="VegetableId", IsForeignKey=true)]
        public Vegetable Vegetable
        {
            get
            {
                return this._Vegetable.Entity;
            }
            set
            {
                Vegetable previousValue = this._Vegetable.Entity;
                if ((previousValue != value) || (this._Vegetable.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Vegetable");
                    if (previousValue != null)
                    {
                        this._Vegetable.Entity = null;
                        previousValue.ProductionDetails.Remove(this);
                    }
                    this._Vegetable.Entity = value;
                    if (value != null)
                    {
                        this._VegetableId = value.VegetableId;
                        value.ProductionDetails.Add(this);
                    }
                    else
                    {
                        this._VegetableId = default(int);
                    }
                    this.SendPropertyChanged("Vegetable");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ProductionDetails_ParentId(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails_ParentId");
            entity.ProductionDetail_ParentId = this;
        }
    
        private void detach_ProductionDetails_ParentId(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails_ParentId");
            entity.ProductionDetail_ParentId = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.Product in the schema.
    /// </summary>
    [Table(Name = @"dbo.Products")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductID;

        private string _ProductName;

        private string _Variety;

        private string _Company;

        private string _Description;

        private int _UnitID;

        private int _CategoryID;

        private decimal _TotalProductQuantity;

        private int _LoginID;

        private System.DateTime _DateTime;
        #pragma warning restore 0649

        private EntitySet<Issue> _Issues;

        private EntityRef<LoginDetail> _LoginDetail;

        private EntityRef<ProductUnit> _ProductUnit;

        private EntityRef<Category> _Category;

        private EntitySet<PurchaseDetail> _PurchaseDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnVarietyChanging(string value);
        partial void OnVarietyChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnUnitIDChanging(int value);
        partial void OnUnitIDChanged();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnTotalProductQuantityChanging(decimal value);
        partial void OnTotalProductQuantityChanged();
        partial void OnLoginIDChanging(int value);
        partial void OnLoginIDChanged();
        partial void OnDateTimeChanging(System.DateTime value);
        partial void OnDateTimeChanged();
        #endregion

        public Product()
        {
            this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
            this._LoginDetail  = default(EntityRef<LoginDetail>);
            this._ProductUnit  = default(EntityRef<ProductUnit>);
            this._Category  = default(EntityRef<Category>);
            this._PurchaseDetails = new EntitySet<PurchaseDetail>(new Action<PurchaseDetail>(this.attach_PurchaseDetails), new Action<PurchaseDetail>(this.detach_PurchaseDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging("ProductID");
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Storage = "_ProductName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging("ProductName");
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Variety in the schema.
        /// </summary>
        [Column(Storage = "_Variety", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Variety
        {
            get
            {
                return this._Variety;
            }
            set
            {
                if (this._Variety != value)
                {
                    this.OnVarietyChanging(value);
                    this.SendPropertyChanging("Variety");
                    this._Variety = value;
                    this.SendPropertyChanged("Variety");
                    this.OnVarietyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Storage = "_Company", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging("Company");
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "VARCHAR(300)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitID in the schema.
        /// </summary>
        [Column(Storage = "_UnitID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UnitID
        {
            get
            {
                return this._UnitID;
            }
            set
            {
                if (this._UnitID != value)
                {
                    if (this._ProductUnit.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUnitIDChanging(value);
                    this.SendPropertyChanging("UnitID");
                    this._UnitID = value;
                    this.SendPropertyChanged("UnitID");
                    this.OnUnitIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryID in the schema.
        /// </summary>
        [Column(Storage = "_CategoryID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging("CategoryID");
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalProductQuantity in the schema.
        /// </summary>
        [Column(Storage = "_TotalProductQuantity", CanBeNull = false, DbType = "DECIMAL(9,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal TotalProductQuantity
        {
            get
            {
                return this._TotalProductQuantity;
            }
            set
            {
                if (this._TotalProductQuantity != value)
                {
                    this.OnTotalProductQuantityChanging(value);
                    this.SendPropertyChanging("TotalProductQuantity");
                    this._TotalProductQuantity = value;
                    this.SendPropertyChanged("TotalProductQuantity");
                    this.OnTotalProductQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginID in the schema.
        /// </summary>
        [Column(Storage = "_LoginID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LoginID
        {
            get
            {
                return this._LoginID;
            }
            set
            {
                if (this._LoginID != value)
                {
                    if (this._LoginDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLoginIDChanging(value);
                    this.SendPropertyChanging("LoginID");
                    this._LoginID = value;
                    this.SendPropertyChanged("LoginID");
                    this.OnLoginIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Issues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Issue", Storage="_Issues", ThisKey="ProductID", OtherKey="ProductID", DeleteRule="NO ACTION")]
        public EntitySet<Issue> Issues
        {
            get
            {
                return this._Issues;
            }
            set
            {
                this._Issues.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for LoginDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_Product", Storage="_LoginDetail", ThisKey="LoginID", OtherKey="LoginID", IsForeignKey=true)]
        public LoginDetail LoginDetail
        {
            get
            {
                return this._LoginDetail.Entity;
            }
            set
            {
                LoginDetail previousValue = this._LoginDetail.Entity;
                if ((previousValue != value) || (this._LoginDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LoginDetail");
                    if (previousValue != null)
                    {
                        this._LoginDetail.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._LoginDetail.Entity = value;
                    if (value != null)
                    {
                        this._LoginID = value.LoginID;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._LoginID = default(int);
                    }
                    this.SendPropertyChanged("LoginDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductUnit in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductUnit_Product", Storage="_ProductUnit", ThisKey="UnitID", OtherKey="UnitID", IsForeignKey=true)]
        public ProductUnit ProductUnit
        {
            get
            {
                return this._ProductUnit.Entity;
            }
            set
            {
                ProductUnit previousValue = this._ProductUnit.Entity;
                if ((previousValue != value) || (this._ProductUnit.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProductUnit");
                    if (previousValue != null)
                    {
                        this._ProductUnit.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._ProductUnit.Entity = value;
                    if (value != null)
                    {
                        this._UnitID = value.UnitID;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._UnitID = default(int);
                    }
                    this.SendPropertyChanged("ProductUnit");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_Product", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if ((previousValue != value) || (this._Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Category");
                    if (previousValue != null)
                    {
                        this._Category.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Category.Entity = value;
                    if (value != null)
                    {
                        this._CategoryID = value.CategoryID;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._CategoryID = default(int);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_PurchaseDetail", Storage="_PurchaseDetails", ThisKey="ProductID", OtherKey="ProductID", DeleteRule="NO ACTION")]
        public EntitySet<PurchaseDetail> PurchaseDetails
        {
            get
            {
                return this._PurchaseDetails;
            }
            set
            {
                this._PurchaseDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.Product = this;
        }
    
        private void detach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.Product = null;
        }

        private void attach_PurchaseDetails(PurchaseDetail entity)
        {
            this.SendPropertyChanging("PurchaseDetails");
            entity.Product = this;
        }
    
        private void detach_PurchaseDetails(PurchaseDetail entity)
        {
            this.SendPropertyChanging("PurchaseDetails");
            entity.Product = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.ProductUnit in the schema.
    /// </summary>
    [Table(Name = @"dbo.ProductUnits")]
    public partial class ProductUnit : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UnitID;

        private string _Type;
        #pragma warning restore 0649

        private EntitySet<Product> _Products;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUnitIDChanging(int value);
        partial void OnUnitIDChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public ProductUnit()
        {
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UnitID in the schema.
        /// </summary>
        [Column(Storage = "_UnitID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UnitID
        {
            get
            {
                return this._UnitID;
            }
            set
            {
                if (this._UnitID != value)
                {
                    this.OnUnitIDChanging(value);
                    this.SendPropertyChanging("UnitID");
                    this._UnitID = value;
                    this.SendPropertyChanged("UnitID");
                    this.OnUnitIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging("Type");
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProductUnit_Product", Storage="_Products", ThisKey="UnitID", OtherKey="UnitID", DeleteRule="NO ACTION")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.ProductUnit = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.ProductUnit = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.PurchaseDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.PurchaseDetails")]
    public partial class PurchaseDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseID;

        private int _ProductID;

        private decimal _TotalQuantity;

        private decimal _TotalCost;

        private string _Unit;

        private string _VendorName;

        private System.DateTime _PurchaseDate;

        private string _Remark;

        private int _LoginID;

        private System.DateTime _LastUpdated;

        private string _PurchaseLocation;

        private string _BillNumber;

        private bool _IsEditable = true;

        private int? _ParentId;
        #pragma warning restore 0649

        private EntityRef<Product> _Product;

        private EntitySet<PurchaseDetail> _PurchaseDetails_ParentId;

        private EntityRef<PurchaseDetail> _PurchaseDetail_ParentId;

        private EntityRef<LoginDetail> _LoginDetail;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseIDChanging(int value);
        partial void OnPurchaseIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnTotalQuantityChanging(decimal value);
        partial void OnTotalQuantityChanged();
        partial void OnTotalCostChanging(decimal value);
        partial void OnTotalCostChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();
        partial void OnVendorNameChanging(string value);
        partial void OnVendorNameChanged();
        partial void OnPurchaseDateChanging(System.DateTime value);
        partial void OnPurchaseDateChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnLoginIDChanging(int value);
        partial void OnLoginIDChanged();
        partial void OnLastUpdatedChanging(System.DateTime value);
        partial void OnLastUpdatedChanged();
        partial void OnPurchaseLocationChanging(string value);
        partial void OnPurchaseLocationChanged();
        partial void OnBillNumberChanging(string value);
        partial void OnBillNumberChanged();
        partial void OnIsEditableChanging(bool value);
        partial void OnIsEditableChanged();
        partial void OnParentIdChanging(int? value);
        partial void OnParentIdChanged();
        #endregion

        public PurchaseDetail()
        {
            this._Product  = default(EntityRef<Product>);
            this._PurchaseDetails_ParentId = new EntitySet<PurchaseDetail>(new Action<PurchaseDetail>(this.attach_PurchaseDetails_ParentId), new Action<PurchaseDetail>(this.detach_PurchaseDetails_ParentId));
            this._PurchaseDetail_ParentId  = default(EntityRef<PurchaseDetail>);
            this._LoginDetail  = default(EntityRef<LoginDetail>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseID in the schema.
        /// </summary>
        [Column(Storage = "_PurchaseID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseID
        {
            get
            {
                return this._PurchaseID;
            }
            set
            {
                if (this._PurchaseID != value)
                {
                    this.OnPurchaseIDChanging(value);
                    this.SendPropertyChanging("PurchaseID");
                    this._PurchaseID = value;
                    this.SendPropertyChanged("PurchaseID");
                    this.OnPurchaseIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging("ProductID");
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalQuantity in the schema.
        /// </summary>
        [Column(Storage = "_TotalQuantity", CanBeNull = false, DbType = "DECIMAL(9,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging("TotalQuantity");
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalCost in the schema.
        /// </summary>
        [Column(Storage = "_TotalCost", CanBeNull = false, DbType = "DECIMAL(9,2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public decimal TotalCost
        {
            get
            {
                return this._TotalCost;
            }
            set
            {
                if (this._TotalCost != value)
                {
                    this.OnTotalCostChanging(value);
                    this.SendPropertyChanging("TotalCost");
                    this._TotalCost = value;
                    this.SendPropertyChanged("TotalCost");
                    this.OnTotalCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unit in the schema.
        /// </summary>
        [Column(Storage = "_Unit", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Unit
        {
            get
            {
                return this._Unit;
            }
            set
            {
                if (this._Unit != value)
                {
                    this.OnUnitChanging(value);
                    this.SendPropertyChanging("Unit");
                    this._Unit = value;
                    this.SendPropertyChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VendorName in the schema.
        /// </summary>
        [Column(Storage = "_VendorName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string VendorName
        {
            get
            {
                return this._VendorName;
            }
            set
            {
                if (this._VendorName != value)
                {
                    this.OnVendorNameChanging(value);
                    this.SendPropertyChanging("VendorName");
                    this._VendorName = value;
                    this.SendPropertyChanged("VendorName");
                    this.OnVendorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseDate in the schema.
        /// </summary>
        [Column(Storage = "_PurchaseDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime PurchaseDate
        {
            get
            {
                return this._PurchaseDate;
            }
            set
            {
                if (this._PurchaseDate != value)
                {
                    this.OnPurchaseDateChanging(value);
                    this.SendPropertyChanging("PurchaseDate");
                    this._PurchaseDate = value;
                    this.SendPropertyChanged("PurchaseDate");
                    this.OnPurchaseDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Storage = "_Remark", DbType = "VARCHAR(150)", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging("Remark");
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginID in the schema.
        /// </summary>
        [Column(Storage = "_LoginID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LoginID
        {
            get
            {
                return this._LoginID;
            }
            set
            {
                if (this._LoginID != value)
                {
                    if (this._LoginDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLoginIDChanging(value);
                    this.SendPropertyChanging("LoginID");
                    this._LoginID = value;
                    this.SendPropertyChanged("LoginID");
                    this.OnLoginIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdated in the schema.
        /// </summary>
        [Column(Storage = "_LastUpdated", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime LastUpdated
        {
            get
            {
                return this._LastUpdated;
            }
            set
            {
                if (this._LastUpdated != value)
                {
                    this.OnLastUpdatedChanging(value);
                    this.SendPropertyChanging("LastUpdated");
                    this._LastUpdated = value;
                    this.SendPropertyChanged("LastUpdated");
                    this.OnLastUpdatedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseLocation in the schema.
        /// </summary>
        [Column(Storage = "_PurchaseLocation", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string PurchaseLocation
        {
            get
            {
                return this._PurchaseLocation;
            }
            set
            {
                if (this._PurchaseLocation != value)
                {
                    this.OnPurchaseLocationChanging(value);
                    this.SendPropertyChanging("PurchaseLocation");
                    this._PurchaseLocation = value;
                    this.SendPropertyChanged("PurchaseLocation");
                    this.OnPurchaseLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BillNumber in the schema.
        /// </summary>
        [Column(Storage = "_BillNumber", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string BillNumber
        {
            get
            {
                return this._BillNumber;
            }
            set
            {
                if (this._BillNumber != value)
                {
                    this.OnBillNumberChanging(value);
                    this.SendPropertyChanging("BillNumber");
                    this._BillNumber = value;
                    this.SendPropertyChanged("BillNumber");
                    this.OnBillNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsEditable in the schema.
        /// </summary>
        [Column(Storage = "_IsEditable", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsEditable
        {
            get
            {
                return this._IsEditable;
            }
            set
            {
                if (this._IsEditable != value)
                {
                    this.OnIsEditableChanging(value);
                    this.SendPropertyChanging("IsEditable");
                    this._IsEditable = value;
                    this.SendPropertyChanged("IsEditable");
                    this.OnIsEditableChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentId in the schema.
        /// </summary>
        [Column(Storage = "_ParentId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ParentId
        {
            get
            {
                return this._ParentId;
            }
            set
            {
                if (this._ParentId != value)
                {
                    if (this._PurchaseDetail_ParentId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentIdChanging(value);
                    this.SendPropertyChanging("ParentId");
                    this._ParentId = value;
                    this.SendPropertyChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_PurchaseDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.PurchaseDetails.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductID = value.ProductID;
                        value.PurchaseDetails.Add(this);
                    }
                    else
                    {
                        this._ProductID = default(int);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseDetails_ParentId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseDetail_PurchaseDetail", Storage="_PurchaseDetails_ParentId", ThisKey="PurchaseID", OtherKey="ParentId", DeleteRule="NO ACTION")]
        public EntitySet<PurchaseDetail> PurchaseDetails_ParentId
        {
            get
            {
                return this._PurchaseDetails_ParentId;
            }
            set
            {
                this._PurchaseDetails_ParentId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseDetail_ParentId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PurchaseDetail_PurchaseDetail", Storage="_PurchaseDetail_ParentId", ThisKey="ParentId", OtherKey="PurchaseID", IsForeignKey=true)]
        public PurchaseDetail PurchaseDetail_ParentId
        {
            get
            {
                return this._PurchaseDetail_ParentId.Entity;
            }
            set
            {
                PurchaseDetail previousValue = this._PurchaseDetail_ParentId.Entity;
                if ((previousValue != value) || (this._PurchaseDetail_ParentId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PurchaseDetail_ParentId");
                    if (previousValue != null)
                    {
                        this._PurchaseDetail_ParentId.Entity = null;
                        previousValue.PurchaseDetails_ParentId.Remove(this);
                    }
                    this._PurchaseDetail_ParentId.Entity = value;
                    if (value != null)
                    {
                        this._ParentId = value.PurchaseID;
                        value.PurchaseDetails_ParentId.Add(this);
                    }
                    else
                    {
                        this._ParentId = default(int?);
                    }
                    this.SendPropertyChanged("PurchaseDetail_ParentId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LoginDetail_PurchaseDetail", Storage="_LoginDetail", ThisKey="LoginID", OtherKey="LoginID", IsForeignKey=true)]
        public LoginDetail LoginDetail
        {
            get
            {
                return this._LoginDetail.Entity;
            }
            set
            {
                LoginDetail previousValue = this._LoginDetail.Entity;
                if ((previousValue != value) || (this._LoginDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("LoginDetail");
                    if (previousValue != null)
                    {
                        this._LoginDetail.Entity = null;
                        previousValue.PurchaseDetails.Remove(this);
                    }
                    this._LoginDetail.Entity = value;
                    if (value != null)
                    {
                        this._LoginID = value.LoginID;
                        value.PurchaseDetails.Add(this);
                    }
                    else
                    {
                        this._LoginID = default(int);
                    }
                    this.SendPropertyChanged("LoginDetail");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PurchaseDetails_ParentId(PurchaseDetail entity)
        {
            this.SendPropertyChanging("PurchaseDetails_ParentId");
            entity.PurchaseDetail_ParentId = this;
        }
    
        private void detach_PurchaseDetails_ParentId(PurchaseDetail entity)
        {
            this.SendPropertyChanging("PurchaseDetails_ParentId");
            entity.PurchaseDetail_ParentId = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.RefreshToken in the schema.
    /// </summary>
    [Table(Name = @"dbo.RefreshToken")]
    public partial class RefreshToken : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RefreshID;

        private string _RToken;
        #pragma warning restore 0649

        private EntitySet<UserRefreshToken> _UserRefreshTokens;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRefreshIDChanging(int value);
        partial void OnRefreshIDChanged();
        partial void OnRTokenChanging(string value);
        partial void OnRTokenChanged();
        #endregion

        public RefreshToken()
        {
            this._UserRefreshTokens = new EntitySet<UserRefreshToken>(new Action<UserRefreshToken>(this.attach_UserRefreshTokens), new Action<UserRefreshToken>(this.detach_UserRefreshTokens));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RefreshID in the schema.
        /// </summary>
        [Column(Storage = "_RefreshID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RefreshID
        {
            get
            {
                return this._RefreshID;
            }
            set
            {
                if (this._RefreshID != value)
                {
                    this.OnRefreshIDChanging(value);
                    this.SendPropertyChanging("RefreshID");
                    this._RefreshID = value;
                    this.SendPropertyChanged("RefreshID");
                    this.OnRefreshIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RToken in the schema.
        /// </summary>
        [Column(Storage = "_RToken", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RToken
        {
            get
            {
                return this._RToken;
            }
            set
            {
                if (this._RToken != value)
                {
                    this.OnRTokenChanging(value);
                    this.SendPropertyChanging("RToken");
                    this._RToken = value;
                    this.SendPropertyChanged("RToken");
                    this.OnRTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserRefreshTokens in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RefreshToken_UserRefreshToken", Storage="_UserRefreshTokens", ThisKey="RefreshID", OtherKey="RefreshID", DeleteRule="NO ACTION")]
        public EntitySet<UserRefreshToken> UserRefreshTokens
        {
            get
            {
                return this._UserRefreshTokens;
            }
            set
            {
                this._UserRefreshTokens.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.RefreshToken = this;
        }
    
        private void detach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.RefreshToken = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.Role in the schema.
    /// </summary>
    [Table(Name = @"dbo.Roles")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleID;

        private string _RoleName;

        private bool? _IsLocked;
        #pragma warning restore 0649

        private EntitySet<DevController> _DevControllers;

        private EntitySet<User> _Users;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleIDChanging(int value);
        partial void OnRoleIDChanged();
        partial void OnRoleNameChanging(string value);
        partial void OnRoleNameChanged();
        partial void OnIsLockedChanging(bool? value);
        partial void OnIsLockedChanged();
        #endregion

        public Role()
        {
            this._DevControllers = new EntitySet<DevController>(new Action<DevController>(this.attach_DevControllers), new Action<DevController>(this.detach_DevControllers));
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleID in the schema.
        /// </summary>
        [Column(Storage = "_RoleID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if (this._RoleID != value)
                {
                    this.OnRoleIDChanging(value);
                    this.SendPropertyChanging("RoleID");
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleName in the schema.
        /// </summary>
        [Column(Storage = "_RoleName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RoleName
        {
            get
            {
                return this._RoleName;
            }
            set
            {
                if (this._RoleName != value)
                {
                    this.OnRoleNameChanging(value);
                    this.SendPropertyChanging("RoleName");
                    this._RoleName = value;
                    this.SendPropertyChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsLocked in the schema.
        /// </summary>
        [Column(Storage = "_IsLocked", DbType = "BIT", UpdateCheck = UpdateCheck.Never)]
        public bool? IsLocked
        {
            get
            {
                return this._IsLocked;
            }
            set
            {
                if (this._IsLocked != value)
                {
                    this.OnIsLockedChanging(value);
                    this.SendPropertyChanging("IsLocked");
                    this._IsLocked = value;
                    this.SendPropertyChanged("IsLocked");
                    this.OnIsLockedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevControllers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_DevController", Storage="_DevControllers", ThisKey="RoleID", OtherKey="LoginTypeId", DeleteRule="NO ACTION")]
        public EntitySet<DevController> DevControllers
        {
            get
            {
                return this._DevControllers;
            }
            set
            {
                this._DevControllers.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Users", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevControllers(DevController entity)
        {
            this.SendPropertyChanging("DevControllers");
            entity.Role = this;
        }
    
        private void detach_DevControllers(DevController entity)
        {
            this.SendPropertyChanging("DevControllers");
            entity.Role = null;
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.UserRefreshToken in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserRefreshToken")]
    public partial class UserRefreshToken : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserID;

        private int _RefreshID;
        #pragma warning restore 0649

        private EntityRef<RefreshToken> _RefreshToken;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnRefreshIDChanging(int value);
        partial void OnRefreshIDChanged();
        #endregion

        public UserRefreshToken()
        {
            this._RefreshToken  = default(EntityRef<RefreshToken>);
            this._User  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshID in the schema.
        /// </summary>
        [Column(Storage = "_RefreshID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int RefreshID
        {
            get
            {
                return this._RefreshID;
            }
            set
            {
                if (this._RefreshID != value)
                {
                    if (this._RefreshToken.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRefreshIDChanging(value);
                    this.SendPropertyChanging("RefreshID");
                    this._RefreshID = value;
                    this.SendPropertyChanged("RefreshID");
                    this.OnRefreshIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshToken in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RefreshToken_UserRefreshToken", Storage="_RefreshToken", ThisKey="RefreshID", OtherKey="RefreshID", IsForeignKey=true)]
        public RefreshToken RefreshToken
        {
            get
            {
                return this._RefreshToken.Entity;
            }
            set
            {
                RefreshToken previousValue = this._RefreshToken.Entity;
                if ((previousValue != value) || (this._RefreshToken.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("RefreshToken");
                    if (previousValue != null)
                    {
                        this._RefreshToken.Entity = null;
                        previousValue.UserRefreshTokens.Remove(this);
                    }
                    this._RefreshToken.Entity = value;
                    if (value != null)
                    {
                        this._RefreshID = value.RefreshID;
                        value.UserRefreshTokens.Add(this);
                    }
                    else
                    {
                        this._RefreshID = default(int);
                    }
                    this.SendPropertyChanged("RefreshToken");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_UserRefreshToken", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.UserRefreshTokens.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.UserID;
                        value.UserRefreshTokens.Add(this);
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.User in the schema.
    /// </summary>
    [Table(Name = @"dbo.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserID;

        private string _UserName;

        private string _Password;

        private string _EmailAddress;

        private int _RoleID;

        private string _SystemMAC;

        private System.DateTime _DateTime;

        private bool? _IsLocked;
        #pragma warning restore 0649

        private EntitySet<LoginDetail> _LoginDetails;

        private EntitySet<UserRefreshToken> _UserRefreshTokens;

        private EntityRef<Role> _Role;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnRoleIDChanging(int value);
        partial void OnRoleIDChanged();
        partial void OnSystemMACChanging(string value);
        partial void OnSystemMACChanged();
        partial void OnDateTimeChanging(System.DateTime value);
        partial void OnDateTimeChanged();
        partial void OnIsLockedChanging(bool? value);
        partial void OnIsLockedChanged();
        #endregion

        public User()
        {
            this._LoginDetails = new EntitySet<LoginDetail>(new Action<LoginDetail>(this.attach_LoginDetails), new Action<LoginDetail>(this.detach_LoginDetails));
            this._UserRefreshTokens = new EntitySet<UserRefreshToken>(new Action<UserRefreshToken>(this.attach_UserRefreshTokens), new Action<UserRefreshToken>(this.detach_UserRefreshTokens));
            this._Role  = default(EntityRef<Role>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmailAddress in the schema.
        /// </summary>
        [Column(Storage = "_EmailAddress", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string EmailAddress
        {
            get
            {
                return this._EmailAddress;
            }
            set
            {
                if (this._EmailAddress != value)
                {
                    this.OnEmailAddressChanging(value);
                    this.SendPropertyChanging("EmailAddress");
                    this._EmailAddress = value;
                    this.SendPropertyChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleID in the schema.
        /// </summary>
        [Column(Storage = "_RoleID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if (this._RoleID != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleIDChanging(value);
                    this.SendPropertyChanging("RoleID");
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SystemMAC in the schema.
        /// </summary>
        [Column(Storage = "_SystemMAC", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string SystemMAC
        {
            get
            {
                return this._SystemMAC;
            }
            set
            {
                if (this._SystemMAC != value)
                {
                    this.OnSystemMACChanging(value);
                    this.SendPropertyChanging("SystemMAC");
                    this._SystemMAC = value;
                    this.SendPropertyChanged("SystemMAC");
                    this.OnSystemMACChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsLocked in the schema.
        /// </summary>
        [Column(Storage = "_IsLocked", DbType = "BIT", UpdateCheck = UpdateCheck.Never)]
        public bool? IsLocked
        {
            get
            {
                return this._IsLocked;
            }
            set
            {
                if (this._IsLocked != value)
                {
                    this.OnIsLockedChanging(value);
                    this.SendPropertyChanging("IsLocked");
                    this._IsLocked = value;
                    this.SendPropertyChanged("IsLocked");
                    this.OnIsLockedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_LoginDetail", Storage="_LoginDetails", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
        public EntitySet<LoginDetail> LoginDetails
        {
            get
            {
                return this._LoginDetails;
            }
            set
            {
                this._LoginDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for UserRefreshTokens in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_UserRefreshToken", Storage="_UserRefreshTokens", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
        public EntitySet<UserRefreshToken> UserRefreshTokens
        {
            get
            {
                return this._UserRefreshTokens;
            }
            set
            {
                this._UserRefreshTokens.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Role");
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._RoleID = value.RoleID;
                        value.Users.Add(this);
                    }
                    else
                    {
                        this._RoleID = default(int);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_LoginDetails(LoginDetail entity)
        {
            this.SendPropertyChanging("LoginDetails");
            entity.User = this;
        }
    
        private void detach_LoginDetails(LoginDetail entity)
        {
            this.SendPropertyChanging("LoginDetails");
            entity.User = null;
        }

        private void attach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.User = this;
        }
    
        private void detach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.User = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.Vegetable in the schema.
    /// </summary>
    [Table(Name = @"dbo.Vegetables")]
    public partial class Vegetable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _VegetableId;

        private string _VegetableName;
        #pragma warning restore 0649

        private EntitySet<ProductionDetail> _ProductionDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnVegetableIdChanging(int value);
        partial void OnVegetableIdChanged();
        partial void OnVegetableNameChanging(string value);
        partial void OnVegetableNameChanged();
        #endregion

        public Vegetable()
        {
            this._ProductionDetails = new EntitySet<ProductionDetail>(new Action<ProductionDetail>(this.attach_ProductionDetails), new Action<ProductionDetail>(this.detach_ProductionDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for VegetableId in the schema.
        /// </summary>
        [Column(Storage = "_VegetableId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int VegetableId
        {
            get
            {
                return this._VegetableId;
            }
            set
            {
                if (this._VegetableId != value)
                {
                    this.OnVegetableIdChanging(value);
                    this.SendPropertyChanging("VegetableId");
                    this._VegetableId = value;
                    this.SendPropertyChanged("VegetableId");
                    this.OnVegetableIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VegetableName in the schema.
        /// </summary>
        [Column(Storage = "_VegetableName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string VegetableName
        {
            get
            {
                return this._VegetableName;
            }
            set
            {
                if (this._VegetableName != value)
                {
                    this.OnVegetableNameChanging(value);
                    this.SendPropertyChanging("VegetableName");
                    this._VegetableName = value;
                    this.SendPropertyChanged("VegetableName");
                    this.OnVegetableNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Vegetable_ProductionDetail", Storage="_ProductionDetails", ThisKey="VegetableId", OtherKey="VegetableId", DeleteRule="NO ACTION")]
        public EntitySet<ProductionDetail> ProductionDetails
        {
            get
            {
                return this._ProductionDetails;
            }
            set
            {
                this._ProductionDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.Vegetable = this;
        }
    
        private void detach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.Vegetable = null;
        }
    }

}
