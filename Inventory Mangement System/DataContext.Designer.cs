//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2/8/2022 2:25:15 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace ProductInventoryContext
{

    [DatabaseAttribute(Name = "Product Inventory")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class ProductInventoryDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(ProductInventoryDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertIssue(Issue instance);
        partial void UpdateIssue(Issue instance);
        partial void DeleteIssue(Issue instance);
        partial void InsertMainArea(MainArea instance);
        partial void UpdateMainArea(MainArea instance);
        partial void DeleteMainArea(MainArea instance);
        partial void InsertProductionDetail(ProductionDetail instance);
        partial void UpdateProductionDetail(ProductionDetail instance);
        partial void DeleteProductionDetail(ProductionDetail instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertProductUnit(ProductUnit instance);
        partial void UpdateProductUnit(ProductUnit instance);
        partial void DeleteProductUnit(ProductUnit instance);
        partial void InsertPurchaseDetail(PurchaseDetail instance);
        partial void UpdatePurchaseDetail(PurchaseDetail instance);
        partial void DeletePurchaseDetail(PurchaseDetail instance);
        partial void InsertRefreshToken(RefreshToken instance);
        partial void UpdateRefreshToken(RefreshToken instance);
        partial void DeleteRefreshToken(RefreshToken instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertSubArea(SubArea instance);
        partial void UpdateSubArea(SubArea instance);
        partial void DeleteSubArea(SubArea instance);
        partial void InsertUserRefreshToken(UserRefreshToken instance);
        partial void UpdateUserRefreshToken(UserRefreshToken instance);
        partial void DeleteUserRefreshToken(UserRefreshToken instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        partial void InsertVegetable(Vegetable instance);
        partial void UpdateVegetable(Vegetable instance);
        partial void DeleteVegetable(Vegetable instance);

        #endregion

        public ProductInventoryDataContext() :
        base(@"Data Source=LAPTOP-F7BFIQ57;Initial Catalog=""Product Inventory"";Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public ProductInventoryDataContext(MappingSource mappingSource) :
        base(@"Data Source=LAPTOP-F7BFIQ57;Initial Catalog=""Product Inventory"";Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public ProductInventoryDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ProductInventoryDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ProductInventoryDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ProductInventoryDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public Devart.Data.Linq.Table<Issue> Issues
        {
            get
            {
                return this.GetTable<Issue>();
            }
        }

        public Devart.Data.Linq.Table<MainArea> MainAreas
        {
            get
            {
                return this.GetTable<MainArea>();
            }
        }

        public Devart.Data.Linq.Table<ProductionDetail> ProductionDetails
        {
            get
            {
                return this.GetTable<ProductionDetail>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<ProductUnit> ProductUnits
        {
            get
            {
                return this.GetTable<ProductUnit>();
            }
        }

        public Devart.Data.Linq.Table<PurchaseDetail> PurchaseDetails
        {
            get
            {
                return this.GetTable<PurchaseDetail>();
            }
        }

        public Devart.Data.Linq.Table<RefreshToken> RefreshTokens
        {
            get
            {
                return this.GetTable<RefreshToken>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<SubArea> SubAreas
        {
            get
            {
                return this.GetTable<SubArea>();
            }
        }

        public Devart.Data.Linq.Table<UserRefreshToken> UserRefreshTokens
        {
            get
            {
                return this.GetTable<UserRefreshToken>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

        public Devart.Data.Linq.Table<Vegetable> Vegetables
        {
            get
            {
                return this.GetTable<Vegetable>();
            }
        }

        public Devart.Data.Linq.Table<LoginDetail> LoginDetails
        {
            get
            {
                return this.GetTable<LoginDetail>();
            }
        }
    }
}

namespace ProductInventoryContext
{

    /// <summary>
    /// There are no comments for ProductInventoryContext.Category in the schema.
    /// </summary>
    [Table(Name = @"dbo.Categories")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CategoryID;

        private string _CategoryName;

        private string _Description;
        #pragma warning restore 0649

        private EntitySet<Product> _Products;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        #endregion

        public Category()
        {
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryID in the schema.
        /// </summary>
        [Column(Storage = "_CategoryID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging("CategoryID");
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryName in the schema.
        /// </summary>
        [Column(Storage = "_CategoryName", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging("CategoryName");
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "VARCHAR(300)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_Product", Storage="_Products", ThisKey="CategoryID", OtherKey="CategoryID", DeleteRule="NO ACTION")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Category = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Category = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.Issue in the schema.
    /// </summary>
    [Table(Name = @"dbo.Issues")]
    public partial class Issue : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IssueID;

        private System.DateTime _IssueDate;

        private int _ProductID;

        private int _MainAreaID;

        private int _SubAreaID;

        private System.DateTime? _DateTime;

        private string _Remark;

        private int? _LoginID;

        private double _PurchaseQuantity;
        #pragma warning restore 0649

        private EntityRef<MainArea> _MainArea;

        private EntityRef<SubArea> _SubArea;

        private EntityRef<Product> _Product;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIssueIDChanging(int value);
        partial void OnIssueIDChanged();
        partial void OnIssueDateChanging(System.DateTime value);
        partial void OnIssueDateChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnMainAreaIDChanging(int value);
        partial void OnMainAreaIDChanged();
        partial void OnSubAreaIDChanging(int value);
        partial void OnSubAreaIDChanged();
        partial void OnDateTimeChanging(System.DateTime? value);
        partial void OnDateTimeChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnLoginIDChanging(int? value);
        partial void OnLoginIDChanged();
        partial void OnPurchaseQuantityChanging(double value);
        partial void OnPurchaseQuantityChanged();
        #endregion

        public Issue()
        {
            this._MainArea  = default(EntityRef<MainArea>);
            this._SubArea  = default(EntityRef<SubArea>);
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IssueID in the schema.
        /// </summary>
        [Column(Storage = "_IssueID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IssueID
        {
            get
            {
                return this._IssueID;
            }
            set
            {
                if (this._IssueID != value)
                {
                    this.OnIssueIDChanging(value);
                    this.SendPropertyChanging("IssueID");
                    this._IssueID = value;
                    this.SendPropertyChanged("IssueID");
                    this.OnIssueIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IssueDate in the schema.
        /// </summary>
        [Column(Storage = "_IssueDate", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime IssueDate
        {
            get
            {
                return this._IssueDate;
            }
            set
            {
                if (this._IssueDate != value)
                {
                    this.OnIssueDateChanging(value);
                    this.SendPropertyChanging("IssueDate");
                    this._IssueDate = value;
                    this.SendPropertyChanged("IssueDate");
                    this.OnIssueDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging("ProductID");
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MainAreaID in the schema.
        /// </summary>
        [Column(Storage = "_MainAreaID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MainAreaID
        {
            get
            {
                return this._MainAreaID;
            }
            set
            {
                if (this._MainAreaID != value)
                {
                    if (this._MainArea.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMainAreaIDChanging(value);
                    this.SendPropertyChanging("MainAreaID");
                    this._MainAreaID = value;
                    this.SendPropertyChanged("MainAreaID");
                    this.OnMainAreaIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubAreaID in the schema.
        /// </summary>
        [Column(Storage = "_SubAreaID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SubAreaID
        {
            get
            {
                return this._SubAreaID;
            }
            set
            {
                if (this._SubAreaID != value)
                {
                    if (this._SubArea.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSubAreaIDChanging(value);
                    this.SendPropertyChanging("SubAreaID");
                    this._SubAreaID = value;
                    this.SendPropertyChanged("SubAreaID");
                    this.OnSubAreaIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Storage = "_Remark", DbType = "VARCHAR(150)", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging("Remark");
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginID in the schema.
        /// </summary>
        [Column(Storage = "_LoginID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? LoginID
        {
            get
            {
                return this._LoginID;
            }
            set
            {
                if (this._LoginID != value)
                {
                    this.OnLoginIDChanging(value);
                    this.SendPropertyChanging("LoginID");
                    this._LoginID = value;
                    this.SendPropertyChanged("LoginID");
                    this.OnLoginIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseQuantity in the schema.
        /// </summary>
        [Column(Storage = "_PurchaseQuantity", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double PurchaseQuantity
        {
            get
            {
                return this._PurchaseQuantity;
            }
            set
            {
                if (this._PurchaseQuantity != value)
                {
                    this.OnPurchaseQuantityChanging(value);
                    this.SendPropertyChanging("PurchaseQuantity");
                    this._PurchaseQuantity = value;
                    this.SendPropertyChanged("PurchaseQuantity");
                    this.OnPurchaseQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MainArea in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="MainArea_Issue", Storage="_MainArea", ThisKey="MainAreaID", OtherKey="MainAreaID", IsForeignKey=true)]
        public MainArea MainArea
        {
            get
            {
                return this._MainArea.Entity;
            }
            set
            {
                MainArea previousValue = this._MainArea.Entity;
                if ((previousValue != value) || (this._MainArea.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("MainArea");
                    if (previousValue != null)
                    {
                        this._MainArea.Entity = null;
                        previousValue.Issues.Remove(this);
                    }
                    this._MainArea.Entity = value;
                    if (value != null)
                    {
                        this._MainAreaID = value.MainAreaID;
                        value.Issues.Add(this);
                    }
                    else
                    {
                        this._MainAreaID = default(int);
                    }
                    this.SendPropertyChanged("MainArea");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubArea in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubArea_Issue", Storage="_SubArea", ThisKey="SubAreaID", OtherKey="SubAreaID", IsForeignKey=true)]
        public SubArea SubArea
        {
            get
            {
                return this._SubArea.Entity;
            }
            set
            {
                SubArea previousValue = this._SubArea.Entity;
                if ((previousValue != value) || (this._SubArea.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubArea");
                    if (previousValue != null)
                    {
                        this._SubArea.Entity = null;
                        previousValue.Issues.Remove(this);
                    }
                    this._SubArea.Entity = value;
                    if (value != null)
                    {
                        this._SubAreaID = value.SubAreaID;
                        value.Issues.Add(this);
                    }
                    else
                    {
                        this._SubAreaID = default(int);
                    }
                    this.SendPropertyChanged("SubArea");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Issue", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.Issues.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductID = value.ProductID;
                        value.Issues.Add(this);
                    }
                    else
                    {
                        this._ProductID = default(int);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.MainArea in the schema.
    /// </summary>
    [Table(Name = @"dbo.MainArea")]
    public partial class MainArea : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _MainAreaID;

        private string _MainAreaName;
        #pragma warning restore 0649

        private EntitySet<Issue> _Issues;

        private EntitySet<ProductionDetail> _ProductionDetails;

        private EntitySet<SubArea> _SubAreas;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMainAreaIDChanging(int value);
        partial void OnMainAreaIDChanged();
        partial void OnMainAreaNameChanging(string value);
        partial void OnMainAreaNameChanged();
        #endregion

        public MainArea()
        {
            this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
            this._ProductionDetails = new EntitySet<ProductionDetail>(new Action<ProductionDetail>(this.attach_ProductionDetails), new Action<ProductionDetail>(this.detach_ProductionDetails));
            this._SubAreas = new EntitySet<SubArea>(new Action<SubArea>(this.attach_SubAreas), new Action<SubArea>(this.detach_SubAreas));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MainAreaID in the schema.
        /// </summary>
        [Column(Storage = "_MainAreaID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int MainAreaID
        {
            get
            {
                return this._MainAreaID;
            }
            set
            {
                if (this._MainAreaID != value)
                {
                    this.OnMainAreaIDChanging(value);
                    this.SendPropertyChanging("MainAreaID");
                    this._MainAreaID = value;
                    this.SendPropertyChanged("MainAreaID");
                    this.OnMainAreaIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MainAreaName in the schema.
        /// </summary>
        [Column(Storage = "_MainAreaName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MainAreaName
        {
            get
            {
                return this._MainAreaName;
            }
            set
            {
                if (this._MainAreaName != value)
                {
                    this.OnMainAreaNameChanging(value);
                    this.SendPropertyChanging("MainAreaName");
                    this._MainAreaName = value;
                    this.SendPropertyChanged("MainAreaName");
                    this.OnMainAreaNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Issues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="MainArea_Issue", Storage="_Issues", ThisKey="MainAreaID", OtherKey="MainAreaID", DeleteRule="NO ACTION")]
        public EntitySet<Issue> Issues
        {
            get
            {
                return this._Issues;
            }
            set
            {
                this._Issues.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="MainArea_ProductionDetail", Storage="_ProductionDetails", ThisKey="MainAreaID", OtherKey="MainAreaID", DeleteRule="NO ACTION")]
        public EntitySet<ProductionDetail> ProductionDetails
        {
            get
            {
                return this._ProductionDetails;
            }
            set
            {
                this._ProductionDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubAreas in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="MainArea_SubArea", Storage="_SubAreas", ThisKey="MainAreaID", OtherKey="MainAreaID", DeleteRule="NO ACTION")]
        public EntitySet<SubArea> SubAreas
        {
            get
            {
                return this._SubAreas;
            }
            set
            {
                this._SubAreas.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.MainArea = this;
        }
    
        private void detach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.MainArea = null;
        }

        private void attach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.MainArea = this;
        }
    
        private void detach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.MainArea = null;
        }

        private void attach_SubAreas(SubArea entity)
        {
            this.SendPropertyChanging("SubAreas");
            entity.MainArea = this;
        }
    
        private void detach_SubAreas(SubArea entity)
        {
            this.SendPropertyChanging("SubAreas");
            entity.MainArea = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.ProductionDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.ProductionDetail")]
    public partial class ProductionDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductionID;

        private int _MainAreaID;

        private int _SubAreaID;

        private int _VegetableID;

        private double _Quantity;
        #pragma warning restore 0649

        private EntityRef<MainArea> _MainArea;

        private EntityRef<Vegetable> _Vegetable;

        private EntityRef<SubArea> _SubArea;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductionIDChanging(int value);
        partial void OnProductionIDChanged();
        partial void OnMainAreaIDChanging(int value);
        partial void OnMainAreaIDChanged();
        partial void OnSubAreaIDChanging(int value);
        partial void OnSubAreaIDChanged();
        partial void OnVegetableIDChanging(int value);
        partial void OnVegetableIDChanged();
        partial void OnQuantityChanging(double value);
        partial void OnQuantityChanged();
        #endregion

        public ProductionDetail()
        {
            this._MainArea  = default(EntityRef<MainArea>);
            this._Vegetable  = default(EntityRef<Vegetable>);
            this._SubArea  = default(EntityRef<SubArea>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductionID in the schema.
        /// </summary>
        [Column(Storage = "_ProductionID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductionID
        {
            get
            {
                return this._ProductionID;
            }
            set
            {
                if (this._ProductionID != value)
                {
                    this.OnProductionIDChanging(value);
                    this.SendPropertyChanging("ProductionID");
                    this._ProductionID = value;
                    this.SendPropertyChanged("ProductionID");
                    this.OnProductionIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MainAreaID in the schema.
        /// </summary>
        [Column(Storage = "_MainAreaID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MainAreaID
        {
            get
            {
                return this._MainAreaID;
            }
            set
            {
                if (this._MainAreaID != value)
                {
                    if (this._MainArea.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMainAreaIDChanging(value);
                    this.SendPropertyChanging("MainAreaID");
                    this._MainAreaID = value;
                    this.SendPropertyChanged("MainAreaID");
                    this.OnMainAreaIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubAreaID in the schema.
        /// </summary>
        [Column(Storage = "_SubAreaID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SubAreaID
        {
            get
            {
                return this._SubAreaID;
            }
            set
            {
                if (this._SubAreaID != value)
                {
                    if (this._SubArea.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSubAreaIDChanging(value);
                    this.SendPropertyChanging("SubAreaID");
                    this._SubAreaID = value;
                    this.SendPropertyChanged("SubAreaID");
                    this.OnSubAreaIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VegetableID in the schema.
        /// </summary>
        [Column(Storage = "_VegetableID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int VegetableID
        {
            get
            {
                return this._VegetableID;
            }
            set
            {
                if (this._VegetableID != value)
                {
                    if (this._Vegetable.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnVegetableIDChanging(value);
                    this.SendPropertyChanging("VegetableID");
                    this._VegetableID = value;
                    this.SendPropertyChanged("VegetableID");
                    this.OnVegetableIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Storage = "_Quantity", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging("Quantity");
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MainArea in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="MainArea_ProductionDetail", Storage="_MainArea", ThisKey="MainAreaID", OtherKey="MainAreaID", IsForeignKey=true)]
        public MainArea MainArea
        {
            get
            {
                return this._MainArea.Entity;
            }
            set
            {
                MainArea previousValue = this._MainArea.Entity;
                if ((previousValue != value) || (this._MainArea.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("MainArea");
                    if (previousValue != null)
                    {
                        this._MainArea.Entity = null;
                        previousValue.ProductionDetails.Remove(this);
                    }
                    this._MainArea.Entity = value;
                    if (value != null)
                    {
                        this._MainAreaID = value.MainAreaID;
                        value.ProductionDetails.Add(this);
                    }
                    else
                    {
                        this._MainAreaID = default(int);
                    }
                    this.SendPropertyChanged("MainArea");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Vegetable in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Vegetable_ProductionDetail", Storage="_Vegetable", ThisKey="VegetableID", OtherKey="VegetableID", IsForeignKey=true)]
        public Vegetable Vegetable
        {
            get
            {
                return this._Vegetable.Entity;
            }
            set
            {
                Vegetable previousValue = this._Vegetable.Entity;
                if ((previousValue != value) || (this._Vegetable.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Vegetable");
                    if (previousValue != null)
                    {
                        this._Vegetable.Entity = null;
                        previousValue.ProductionDetails.Remove(this);
                    }
                    this._Vegetable.Entity = value;
                    if (value != null)
                    {
                        this._VegetableID = value.VegetableID;
                        value.ProductionDetails.Add(this);
                    }
                    else
                    {
                        this._VegetableID = default(int);
                    }
                    this.SendPropertyChanged("Vegetable");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubArea in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubArea_ProductionDetail", Storage="_SubArea", ThisKey="SubAreaID", OtherKey="SubAreaID", IsForeignKey=true)]
        public SubArea SubArea
        {
            get
            {
                return this._SubArea.Entity;
            }
            set
            {
                SubArea previousValue = this._SubArea.Entity;
                if ((previousValue != value) || (this._SubArea.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubArea");
                    if (previousValue != null)
                    {
                        this._SubArea.Entity = null;
                        previousValue.ProductionDetails.Remove(this);
                    }
                    this._SubArea.Entity = value;
                    if (value != null)
                    {
                        this._SubAreaID = value.SubAreaID;
                        value.ProductionDetails.Add(this);
                    }
                    else
                    {
                        this._SubAreaID = default(int);
                    }
                    this.SendPropertyChanged("SubArea");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.Product in the schema.
    /// </summary>
    [Table(Name = @"dbo.Products")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ProductID;

        private string _ProductName;

        private string _Variety;

        private string _Company;

        private string _Description;

        private string _Unit;

        private int _CategoryID;

        private double? _TotalProductQuantity;

        private int? _LoginID;

        private System.DateTime? _DateTime;
        #pragma warning restore 0649

        private EntityRef<Category> _Category;

        private EntitySet<Issue> _Issues;

        private EntitySet<PurchaseDetail> _PurchaseDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnVarietyChanging(string value);
        partial void OnVarietyChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnTotalProductQuantityChanging(double? value);
        partial void OnTotalProductQuantityChanged();
        partial void OnLoginIDChanging(int? value);
        partial void OnLoginIDChanged();
        partial void OnDateTimeChanging(System.DateTime? value);
        partial void OnDateTimeChanged();
        #endregion

        public Product()
        {
            this._Category  = default(EntityRef<Category>);
            this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
            this._PurchaseDetails = new EntitySet<PurchaseDetail>(new Action<PurchaseDetail>(this.attach_PurchaseDetails), new Action<PurchaseDetail>(this.detach_PurchaseDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging("ProductID");
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductName in the schema.
        /// </summary>
        [Column(Storage = "_ProductName", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging("ProductName");
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Variety in the schema.
        /// </summary>
        [Column(Storage = "_Variety", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string Variety
        {
            get
            {
                return this._Variety;
            }
            set
            {
                if (this._Variety != value)
                {
                    this.OnVarietyChanging(value);
                    this.SendPropertyChanging("Variety");
                    this._Variety = value;
                    this.SendPropertyChanged("Variety");
                    this.OnVarietyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Company in the schema.
        /// </summary>
        [Column(Storage = "_Company", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Company
        {
            get
            {
                return this._Company;
            }
            set
            {
                if (this._Company != value)
                {
                    this.OnCompanyChanging(value);
                    this.SendPropertyChanging("Company");
                    this._Company = value;
                    this.SendPropertyChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unit in the schema.
        /// </summary>
        [Column(Storage = "_Unit", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Unit
        {
            get
            {
                return this._Unit;
            }
            set
            {
                if (this._Unit != value)
                {
                    this.OnUnitChanging(value);
                    this.SendPropertyChanging("Unit");
                    this._Unit = value;
                    this.SendPropertyChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CategoryID in the schema.
        /// </summary>
        [Column(Storage = "_CategoryID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging("CategoryID");
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalProductQuantity in the schema.
        /// </summary>
        [Column(Storage = "_TotalProductQuantity", DbType = "FLOAT", UpdateCheck = UpdateCheck.Never)]
        public double? TotalProductQuantity
        {
            get
            {
                return this._TotalProductQuantity;
            }
            set
            {
                if (this._TotalProductQuantity != value)
                {
                    this.OnTotalProductQuantityChanging(value);
                    this.SendPropertyChanging("TotalProductQuantity");
                    this._TotalProductQuantity = value;
                    this.SendPropertyChanged("TotalProductQuantity");
                    this.OnTotalProductQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginID in the schema.
        /// </summary>
        [Column(Storage = "_LoginID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? LoginID
        {
            get
            {
                return this._LoginID;
            }
            set
            {
                if (this._LoginID != value)
                {
                    this.OnLoginIDChanging(value);
                    this.SendPropertyChanging("LoginID");
                    this._LoginID = value;
                    this.SendPropertyChanged("LoginID");
                    this.OnLoginIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging("DateTime");
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_Product", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if ((previousValue != value) || (this._Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Category");
                    if (previousValue != null)
                    {
                        this._Category.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Category.Entity = value;
                    if (value != null)
                    {
                        this._CategoryID = value.CategoryID;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._CategoryID = default(int);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Issues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Issue", Storage="_Issues", ThisKey="ProductID", OtherKey="ProductID", DeleteRule="NO ACTION")]
        public EntitySet<Issue> Issues
        {
            get
            {
                return this._Issues;
            }
            set
            {
                this._Issues.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_PurchaseDetail", Storage="_PurchaseDetails", ThisKey="ProductID", OtherKey="ProductID", DeleteRule="NO ACTION")]
        public EntitySet<PurchaseDetail> PurchaseDetails
        {
            get
            {
                return this._PurchaseDetails;
            }
            set
            {
                this._PurchaseDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.Product = this;
        }
    
        private void detach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.Product = null;
        }

        private void attach_PurchaseDetails(PurchaseDetail entity)
        {
            this.SendPropertyChanging("PurchaseDetails");
            entity.Product = this;
        }
    
        private void detach_PurchaseDetails(PurchaseDetail entity)
        {
            this.SendPropertyChanging("PurchaseDetails");
            entity.Product = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.ProductUnit in the schema.
    /// </summary>
    [Table(Name = @"dbo.ProductUnits")]
    public partial class ProductUnit : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UnitID;

        private string _Type;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUnitIDChanging(int value);
        partial void OnUnitIDChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        #endregion

        public ProductUnit()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UnitID in the schema.
        /// </summary>
        [Column(Storage = "_UnitID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UnitID
        {
            get
            {
                return this._UnitID;
            }
            set
            {
                if (this._UnitID != value)
                {
                    this.OnUnitIDChanging(value);
                    this.SendPropertyChanging("UnitID");
                    this._UnitID = value;
                    this.SendPropertyChanged("UnitID");
                    this.OnUnitIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging("Type");
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.PurchaseDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.PurchaseDetails")]
    public partial class PurchaseDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PurchaseID;

        private int _ProductID;

        private double _TotalQuantity;

        private double _TotalCost;

        private string _Unit;

        private string _Remark;

        private string _VendorName;

        private System.DateTime _PurchaseDate;
        #pragma warning restore 0649

        private EntityRef<Product> _Product;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPurchaseIDChanging(int value);
        partial void OnPurchaseIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnTotalQuantityChanging(double value);
        partial void OnTotalQuantityChanged();
        partial void OnTotalCostChanging(double value);
        partial void OnTotalCostChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();
        partial void OnRemarkChanging(string value);
        partial void OnRemarkChanged();
        partial void OnVendorNameChanging(string value);
        partial void OnVendorNameChanged();
        partial void OnPurchaseDateChanging(System.DateTime value);
        partial void OnPurchaseDateChanged();
        #endregion

        public PurchaseDetail()
        {
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PurchaseID in the schema.
        /// </summary>
        [Column(Storage = "_PurchaseID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PurchaseID
        {
            get
            {
                return this._PurchaseID;
            }
            set
            {
                if (this._PurchaseID != value)
                {
                    this.OnPurchaseIDChanging(value);
                    this.SendPropertyChanging("PurchaseID");
                    this._PurchaseID = value;
                    this.SendPropertyChanged("PurchaseID");
                    this.OnPurchaseIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductID in the schema.
        /// </summary>
        [Column(Storage = "_ProductID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging("ProductID");
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalQuantity in the schema.
        /// </summary>
        [Column(Storage = "_TotalQuantity", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double TotalQuantity
        {
            get
            {
                return this._TotalQuantity;
            }
            set
            {
                if (this._TotalQuantity != value)
                {
                    this.OnTotalQuantityChanging(value);
                    this.SendPropertyChanging("TotalQuantity");
                    this._TotalQuantity = value;
                    this.SendPropertyChanged("TotalQuantity");
                    this.OnTotalQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalCost in the schema.
        /// </summary>
        [Column(Storage = "_TotalCost", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double TotalCost
        {
            get
            {
                return this._TotalCost;
            }
            set
            {
                if (this._TotalCost != value)
                {
                    this.OnTotalCostChanging(value);
                    this.SendPropertyChanging("TotalCost");
                    this._TotalCost = value;
                    this.SendPropertyChanged("TotalCost");
                    this.OnTotalCostChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unit in the schema.
        /// </summary>
        [Column(Storage = "_Unit", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Unit
        {
            get
            {
                return this._Unit;
            }
            set
            {
                if (this._Unit != value)
                {
                    this.OnUnitChanging(value);
                    this.SendPropertyChanging("Unit");
                    this._Unit = value;
                    this.SendPropertyChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Remark in the schema.
        /// </summary>
        [Column(Storage = "_Remark", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Remark
        {
            get
            {
                return this._Remark;
            }
            set
            {
                if (this._Remark != value)
                {
                    this.OnRemarkChanging(value);
                    this.SendPropertyChanging("Remark");
                    this._Remark = value;
                    this.SendPropertyChanged("Remark");
                    this.OnRemarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VendorName in the schema.
        /// </summary>
        [Column(Storage = "_VendorName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string VendorName
        {
            get
            {
                return this._VendorName;
            }
            set
            {
                if (this._VendorName != value)
                {
                    this.OnVendorNameChanging(value);
                    this.SendPropertyChanging("VendorName");
                    this._VendorName = value;
                    this.SendPropertyChanged("VendorName");
                    this.OnVendorNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PurchaseDate in the schema.
        /// </summary>
        [Column(Storage = "_PurchaseDate", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime PurchaseDate
        {
            get
            {
                return this._PurchaseDate;
            }
            set
            {
                if (this._PurchaseDate != value)
                {
                    this.OnPurchaseDateChanging(value);
                    this.SendPropertyChanging("PurchaseDate");
                    this._PurchaseDate = value;
                    this.SendPropertyChanged("PurchaseDate");
                    this.OnPurchaseDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_PurchaseDetail", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.PurchaseDetails.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductID = value.ProductID;
                        value.PurchaseDetails.Add(this);
                    }
                    else
                    {
                        this._ProductID = default(int);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.RefreshToken in the schema.
    /// </summary>
    [Table(Name = @"dbo.RefreshToken")]
    public partial class RefreshToken : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RefreshID;

        private string _RToken;
        #pragma warning restore 0649

        private EntitySet<UserRefreshToken> _UserRefreshTokens;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRefreshIDChanging(int value);
        partial void OnRefreshIDChanged();
        partial void OnRTokenChanging(string value);
        partial void OnRTokenChanged();
        #endregion

        public RefreshToken()
        {
            this._UserRefreshTokens = new EntitySet<UserRefreshToken>(new Action<UserRefreshToken>(this.attach_UserRefreshTokens), new Action<UserRefreshToken>(this.detach_UserRefreshTokens));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RefreshID in the schema.
        /// </summary>
        [Column(Storage = "_RefreshID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RefreshID
        {
            get
            {
                return this._RefreshID;
            }
            set
            {
                if (this._RefreshID != value)
                {
                    this.OnRefreshIDChanging(value);
                    this.SendPropertyChanging("RefreshID");
                    this._RefreshID = value;
                    this.SendPropertyChanged("RefreshID");
                    this.OnRefreshIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RToken in the schema.
        /// </summary>
        [Column(Storage = "_RToken", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string RToken
        {
            get
            {
                return this._RToken;
            }
            set
            {
                if (this._RToken != value)
                {
                    this.OnRTokenChanging(value);
                    this.SendPropertyChanging("RToken");
                    this._RToken = value;
                    this.SendPropertyChanged("RToken");
                    this.OnRTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserRefreshTokens in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RefreshToken_UserRefreshToken", Storage="_UserRefreshTokens", ThisKey="RefreshID", OtherKey="RefreshID", DeleteRule="NO ACTION")]
        public EntitySet<UserRefreshToken> UserRefreshTokens
        {
            get
            {
                return this._UserRefreshTokens;
            }
            set
            {
                this._UserRefreshTokens.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.RefreshToken = this;
        }
    
        private void detach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.RefreshToken = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.Role in the schema.
    /// </summary>
    [Table(Name = @"dbo.Roles")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleID;

        private string _RoleName;
        #pragma warning restore 0649

        private EntitySet<User> _Users;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleIDChanging(int value);
        partial void OnRoleIDChanged();
        partial void OnRoleNameChanging(string value);
        partial void OnRoleNameChanged();
        #endregion

        public Role()
        {
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleID in the schema.
        /// </summary>
        [Column(Storage = "_RoleID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if (this._RoleID != value)
                {
                    this.OnRoleIDChanging(value);
                    this.SendPropertyChanging("RoleID");
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleName in the schema.
        /// </summary>
        [Column(Storage = "_RoleName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RoleName
        {
            get
            {
                return this._RoleName;
            }
            set
            {
                if (this._RoleName != value)
                {
                    this.OnRoleNameChanging(value);
                    this.SendPropertyChanging("RoleName");
                    this._RoleName = value;
                    this.SendPropertyChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Users", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.SubArea in the schema.
    /// </summary>
    [Table(Name = @"dbo.SubArea")]
    public partial class SubArea : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SubAreaID;

        private string _SubAreaName;

        private int _MainAreaID;
        #pragma warning restore 0649

        private EntitySet<Issue> _Issues;

        private EntityRef<MainArea> _MainArea;

        private EntitySet<ProductionDetail> _ProductionDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSubAreaIDChanging(int value);
        partial void OnSubAreaIDChanged();
        partial void OnSubAreaNameChanging(string value);
        partial void OnSubAreaNameChanged();
        partial void OnMainAreaIDChanging(int value);
        partial void OnMainAreaIDChanged();
        #endregion

        public SubArea()
        {
            this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
            this._MainArea  = default(EntityRef<MainArea>);
            this._ProductionDetails = new EntitySet<ProductionDetail>(new Action<ProductionDetail>(this.attach_ProductionDetails), new Action<ProductionDetail>(this.detach_ProductionDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SubAreaID in the schema.
        /// </summary>
        [Column(Storage = "_SubAreaID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int SubAreaID
        {
            get
            {
                return this._SubAreaID;
            }
            set
            {
                if (this._SubAreaID != value)
                {
                    this.OnSubAreaIDChanging(value);
                    this.SendPropertyChanging("SubAreaID");
                    this._SubAreaID = value;
                    this.SendPropertyChanged("SubAreaID");
                    this.OnSubAreaIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubAreaName in the schema.
        /// </summary>
        [Column(Storage = "_SubAreaName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SubAreaName
        {
            get
            {
                return this._SubAreaName;
            }
            set
            {
                if (this._SubAreaName != value)
                {
                    this.OnSubAreaNameChanging(value);
                    this.SendPropertyChanging("SubAreaName");
                    this._SubAreaName = value;
                    this.SendPropertyChanged("SubAreaName");
                    this.OnSubAreaNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MainAreaID in the schema.
        /// </summary>
        [Column(Storage = "_MainAreaID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int MainAreaID
        {
            get
            {
                return this._MainAreaID;
            }
            set
            {
                if (this._MainAreaID != value)
                {
                    if (this._MainArea.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMainAreaIDChanging(value);
                    this.SendPropertyChanging("MainAreaID");
                    this._MainAreaID = value;
                    this.SendPropertyChanged("MainAreaID");
                    this.OnMainAreaIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Issues in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubArea_Issue", Storage="_Issues", ThisKey="SubAreaID", OtherKey="SubAreaID", DeleteRule="NO ACTION")]
        public EntitySet<Issue> Issues
        {
            get
            {
                return this._Issues;
            }
            set
            {
                this._Issues.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for MainArea in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="MainArea_SubArea", Storage="_MainArea", ThisKey="MainAreaID", OtherKey="MainAreaID", IsForeignKey=true)]
        public MainArea MainArea
        {
            get
            {
                return this._MainArea.Entity;
            }
            set
            {
                MainArea previousValue = this._MainArea.Entity;
                if ((previousValue != value) || (this._MainArea.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("MainArea");
                    if (previousValue != null)
                    {
                        this._MainArea.Entity = null;
                        previousValue.SubAreas.Remove(this);
                    }
                    this._MainArea.Entity = value;
                    if (value != null)
                    {
                        this._MainAreaID = value.MainAreaID;
                        value.SubAreas.Add(this);
                    }
                    else
                    {
                        this._MainAreaID = default(int);
                    }
                    this.SendPropertyChanged("MainArea");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubArea_ProductionDetail", Storage="_ProductionDetails", ThisKey="SubAreaID", OtherKey="SubAreaID", DeleteRule="NO ACTION")]
        public EntitySet<ProductionDetail> ProductionDetails
        {
            get
            {
                return this._ProductionDetails;
            }
            set
            {
                this._ProductionDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.SubArea = this;
        }
    
        private void detach_Issues(Issue entity)
        {
            this.SendPropertyChanging("Issues");
            entity.SubArea = null;
        }

        private void attach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.SubArea = this;
        }
    
        private void detach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.SubArea = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.UserRefreshToken in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserRefreshToken")]
    public partial class UserRefreshToken : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserID;

        private int _RefreshID;
        #pragma warning restore 0649

        private EntityRef<RefreshToken> _RefreshToken;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnRefreshIDChanging(int value);
        partial void OnRefreshIDChanged();
        #endregion

        public UserRefreshToken()
        {
            this._RefreshToken  = default(EntityRef<RefreshToken>);
            this._User  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshID in the schema.
        /// </summary>
        [Column(Storage = "_RefreshID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int RefreshID
        {
            get
            {
                return this._RefreshID;
            }
            set
            {
                if (this._RefreshID != value)
                {
                    if (this._RefreshToken.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRefreshIDChanging(value);
                    this.SendPropertyChanging("RefreshID");
                    this._RefreshID = value;
                    this.SendPropertyChanged("RefreshID");
                    this.OnRefreshIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RefreshToken in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RefreshToken_UserRefreshToken", Storage="_RefreshToken", ThisKey="RefreshID", OtherKey="RefreshID", IsForeignKey=true)]
        public RefreshToken RefreshToken
        {
            get
            {
                return this._RefreshToken.Entity;
            }
            set
            {
                RefreshToken previousValue = this._RefreshToken.Entity;
                if ((previousValue != value) || (this._RefreshToken.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("RefreshToken");
                    if (previousValue != null)
                    {
                        this._RefreshToken.Entity = null;
                        previousValue.UserRefreshTokens.Remove(this);
                    }
                    this._RefreshToken.Entity = value;
                    if (value != null)
                    {
                        this._RefreshID = value.RefreshID;
                        value.UserRefreshTokens.Add(this);
                    }
                    else
                    {
                        this._RefreshID = default(int);
                    }
                    this.SendPropertyChanged("RefreshToken");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_UserRefreshToken", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.UserRefreshTokens.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserID = value.UserID;
                        value.UserRefreshTokens.Add(this);
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.User in the schema.
    /// </summary>
    [Table(Name = @"dbo.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserID;

        private string _UserName;

        private string _Password;

        private string _EmailAddress;

        private int _RoleID;
        #pragma warning restore 0649

        private EntityRef<Role> _Role;

        private EntitySet<UserRefreshToken> _UserRefreshTokens;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnRoleIDChanging(int value);
        partial void OnRoleIDChanged();
        #endregion

        public User()
        {
            this._Role  = default(EntityRef<Role>);
            this._UserRefreshTokens = new EntitySet<UserRefreshToken>(new Action<UserRefreshToken>(this.attach_UserRefreshTokens), new Action<UserRefreshToken>(this.detach_UserRefreshTokens));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmailAddress in the schema.
        /// </summary>
        [Column(Storage = "_EmailAddress", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string EmailAddress
        {
            get
            {
                return this._EmailAddress;
            }
            set
            {
                if (this._EmailAddress != value)
                {
                    this.OnEmailAddressChanging(value);
                    this.SendPropertyChanging("EmailAddress");
                    this._EmailAddress = value;
                    this.SendPropertyChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleID in the schema.
        /// </summary>
        [Column(Storage = "_RoleID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if (this._RoleID != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRoleIDChanging(value);
                    this.SendPropertyChanging("RoleID");
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Role");
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._RoleID = value.RoleID;
                        value.Users.Add(this);
                    }
                    else
                    {
                        this._RoleID = default(int);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserRefreshTokens in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_UserRefreshToken", Storage="_UserRefreshTokens", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
        public EntitySet<UserRefreshToken> UserRefreshTokens
        {
            get
            {
                return this._UserRefreshTokens;
            }
            set
            {
                this._UserRefreshTokens.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.User = this;
        }
    
        private void detach_UserRefreshTokens(UserRefreshToken entity)
        {
            this.SendPropertyChanging("UserRefreshTokens");
            entity.User = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.Vegetable in the schema.
    /// </summary>
    [Table(Name = @"dbo.Vegetables")]
    public partial class Vegetable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _VegetableID;

        private string _VegetableName;
        #pragma warning restore 0649

        private EntitySet<ProductionDetail> _ProductionDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnVegetableIDChanging(int value);
        partial void OnVegetableIDChanged();
        partial void OnVegetableNameChanging(string value);
        partial void OnVegetableNameChanged();
        #endregion

        public Vegetable()
        {
            this._ProductionDetails = new EntitySet<ProductionDetail>(new Action<ProductionDetail>(this.attach_ProductionDetails), new Action<ProductionDetail>(this.detach_ProductionDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for VegetableID in the schema.
        /// </summary>
        [Column(Storage = "_VegetableID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int VegetableID
        {
            get
            {
                return this._VegetableID;
            }
            set
            {
                if (this._VegetableID != value)
                {
                    this.OnVegetableIDChanging(value);
                    this.SendPropertyChanging("VegetableID");
                    this._VegetableID = value;
                    this.SendPropertyChanged("VegetableID");
                    this.OnVegetableIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VegetableName in the schema.
        /// </summary>
        [Column(Storage = "_VegetableName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string VegetableName
        {
            get
            {
                return this._VegetableName;
            }
            set
            {
                if (this._VegetableName != value)
                {
                    this.OnVegetableNameChanging(value);
                    this.SendPropertyChanging("VegetableName");
                    this._VegetableName = value;
                    this.SendPropertyChanged("VegetableName");
                    this.OnVegetableNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductionDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Vegetable_ProductionDetail", Storage="_ProductionDetails", ThisKey="VegetableID", OtherKey="VegetableID", DeleteRule="NO ACTION")]
        public EntitySet<ProductionDetail> ProductionDetails
        {
            get
            {
                return this._ProductionDetails;
            }
            set
            {
                this._ProductionDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.Vegetable = this;
        }
    
        private void detach_ProductionDetails(ProductionDetail entity)
        {
            this.SendPropertyChanging("ProductionDetails");
            entity.Vegetable = null;
        }
    }

    /// <summary>
    /// There are no comments for ProductInventoryContext.LoginDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.LoginDetails")]
    public partial class LoginDetail
    {
        #pragma warning disable 0649

        private int _LoginID;

        private string _UserName;

        private string _SystemMac;

        private System.DateTime _DateTime;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLoginIDChanging(int value);
        partial void OnLoginIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnSystemMacChanging(string value);
        partial void OnSystemMacChanged();
        partial void OnDateTimeChanging(System.DateTime value);
        partial void OnDateTimeChanged();
        #endregion

        public LoginDetail()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LoginID in the schema.
        /// </summary>
        [Column(Storage = "_LoginID", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LoginID
        {
            get
            {
                return this._LoginID;
            }
            set
            {
                if (this._LoginID != value)
                {
                    this._LoginID = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this._UserName = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SystemMac in the schema.
        /// </summary>
        [Column(Storage = "_SystemMac", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string SystemMac
        {
            get
            {
                return this._SystemMac;
            }
            set
            {
                if (this._SystemMac != value)
                {
                    this._SystemMac = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        [Column(Storage = "_DateTime", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if (this._DateTime != value)
                {
                    this._DateTime = value;
                }
            }
        }
    }

}
